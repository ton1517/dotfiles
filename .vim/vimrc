"---------------------------------------------------------------------------
" vim settings
"---------------------------------------------------------------------------

"----------------------------------------
" mapping settings
"----------------------------------------

" セミコロンでコマンドラインモードに入る
nnoremap ; :

" 移動をちょっと早く
nnoremap <C-j> 5j
vnoremap <C-j> 5j
nnoremap <C-k> 5k
vnoremap <C-k> 5k
" 行頭、行末にジャンプ
nnoremap <C-h> ^
vnoremap <C-h> ^
nnoremap <C-l> $
vnoremap <C-l> $

" タグジャンプ
nnoremap <silent> ,tn <C-]>
nnoremap <silent> ,tp <C-t>
" ノーマルモード時にOで改行
nnoremap O o<ESC>
" hlsearchのハイライトを消去
nnoremap <ESC><ESC> :nohlsearch<CR>
" Ctrl-sで保存
inoremap <C-s> <Esc>:w<CR>
nnoremap <C-s> <Esc>:w<CR>

" 折り返されたテキストを自然に移動
nnoremap j gj
nnoremap k gk

" 行末までヤンク
nnoremap Y y$


"
" ウィンドウ関連操作
"
nnoremap s <Nop>

nnoremap ss <C-w>s
nnoremap sv <C-w>v

nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H

"----------------------------------------
" search settings
"----------------------------------------

"検索時に大文字小文字を無視 (noignorecase:無視しない)
set ignorecase
"両方が含まれている場合は大文字小文字を区別
set smartcase
" 検索時にファイルの最後まで行ったら最初に戻る (nowrapscan:戻らない)
set wrapscan
" インクリメンタルサーチ
set incsearch
" 検索パターンにマッチしたテキストのハイライト
set hlsearch

"----------------------------------------
" edit settings
"----------------------------------------

set hidden
set updatetime=100
set shortmess+=c

" タブの画面上での幅
set tabstop=4
" タブを挿入するときの幅
set shiftwidth=4
" <Tab>と<BS>を押した時の挙動をいい感じにする
set smarttab
" タブをスペースに展開する
set expandtab
" 自動的にインデントする
set cindent
" コメントのオートインデントといい感じに
if has("autocmd")
    autocmd FileType *
                \ let &l:comments
                \=join(filter(split(&l:comments, ','), 'v:val =~ "^[sme]"'), ',')
endif
" バックスペースでインデントや改行を削除できるようにする
set backspace=indent,eol,start
" 括弧入力時に対応する括弧を表示
set showmatch
" コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmenu

set formatoptions=tcqmMro

" ビープ音を鳴らさないように
set visualbell

" インクリメント時の挙動 デフォでは0や0xで始まる数字は8進，16進とみなされる
" 16進のみ許可し，他の数字は10進として扱う．
set nf=hex
" 画面端まで行かなくてもスクロールできる
set scrolloff=10

" インデントで折りたたみ
set foldmethod=indent
set foldlevel=99

" クリップボードを共有
set clipboard+=unnamed

" バックアップをとらない
set nobackup
set nowritebackup
set noswapfile
"----------------------------------------
" display settings
"----------------------------------------

syntax on
" 256色カラー
set t_Co=256

" 行番号を非表示 (number:表示)
set number
" ルーラーを表示 (noruler:非表示)
set ruler
" タブや改行を表示 (list:表示)
set list
" どの文字でタブや改行を表示するかを設定
set listchars=tab:\|\ ,extends:⇢,precedes:⇠,trail:»
" 長い行を折り返して表示 (nowrap:折り返さない)
set wrap
" 常にステータス行を表示 (詳細は:he laststatus)
set laststatus=2
" コマンドラインの高さ (Windows用gvim使用時はgvimrcを編集すること)
set cmdheight=2
" コマンドをステータス行に表示
set showcmd
" タイトルを表示
set title

set signcolumn=yes

" カーソルのある行を強調表示
" set cursorline

" 特殊文字の色設定
hi NonText ctermbg=NONE ctermfg=darkgray
hi SpecialKey ctermbg=NONE ctermfg=yellow

" 高速化
set ttyfast
set lazyredraw

" カラー
if (has("termguicolors"))
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

set background=dark

colorscheme gruvbox

" switch inactive window background color.
if (has("nvim"))
    hi ActiveWindow guibg=bg
    hi InactiveWindow guibg=#111111

    augroup WindowManagement
      autocmd!
      autocmd WinEnter * call Highlight_Enter()
      autocmd WinLeave * call Highlight_Leave()
      autocmd FocusGained * call Highlight_Enter()
      autocmd FocusLost * call Highlight_Leave()
    augroup END

    function! Highlight_Enter()
      setlocal winhighlight=Normal:ActiveWindow,NormalNC:InactiveWindow
    endfunction

    function! Highlight_Leave()
      setlocal winhighlight=Normal:InactiveWindow,NormalNC:InactiveWindow
    endfunction
endif

"----------------------------------------
" ex settings
"----------------------------------------

"自動保存
set autowrite
"外部で変更があった場合自動的にファイルを読みなおす
set autoread
"頻繁に読み直すように
augroup vimrc-checktime
    autocmd!
    autocmd WinEnter * checktime
augroup END

" 改行コードの自動認識
set fileformats=unix,dos,mac

set mouse=a
