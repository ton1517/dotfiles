"---------------------------------------------------------------------------
" plugin settings
"---------------------------------------------------------------------------

"----------------------------------------
" NeoBundle
"----------------------------------------
filetype off

if has('vim_starting')
set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

"--------------------
" my plugins

" NeoBundle
NeoBundle 'Shougo/neobundle.vim'

" unite
NeoBundle 'Shougo/unite.vim'

" unite-outline
NeoBundleLazy 'Shougo/unite-outline', {
\   "depends" : "Shougo/unite.vim",
\   "autoload" : {
\       "unite_sources" : "outline"
\   }
\}

" unite-build
NeoBundleLazy 'Shougo/unite-build', {
\   "depends" : "Shougo/unite.vim",
\   "autoload" : {
\       "unite_sources" : "build"
\   }
\}

if has('lua')
" neocomplete
NeoBundleLazy 'Shougo/neocomplete', {
\   "autoload" : {
\       "insert" : 1
\   }
\}
else
" neocomplcache
NeoBundleLazy 'Shougo/neocomplcache', {
\   "autoload" : {
\       "insert" : 1
\   }
\}
endif

" neosnippet
NeoBundleLazy 'Shougo/neosnippet', {
\   "autoload" : {
\       "insert" : 1
\   }
\}

" neosnippet-snippets
NeoBundleLazy 'Shougo/neosnippet-snippets', {
\   "autoload" : {
\       "insert" : 1
\   }
\}

" vimfiler
NeoBundleLazy 'Shougo/vimfiler', {
\   'depends' : 'Shougo/unite.vim',
\   'autoload' : {
\       'commands' : [{ 'name' : 'VimFiler',
\                    'complete' : 'customlist,vimfiler#complete' },
\                    'VimFilerExplorer',
\                    'VimFilerTab',
\                    'Edit', 'Read', 'Source', 'Write'],
\   'mappings' : ['<Plug>(vimfiler_switch)'],
\   'explorer' : 1,
\   }
\}

" vim-quickrun
NeoBundleLazy 'thinca/vim-quickrun', {
\   "autoload" : {
\       'mappings' : '<Plug>(quickrun)',
\       "commands" : "QuickRun"
\   }
\}

" vim-fugitive
NeoBundle 'tpope/vim-fugitive'

" indentLine
NeoBundle 'Yggdroot/indentLine'

" tComment
NeoBundle 'tomtom/tcomment_vim'

" sudo.vim
NeoBundle 'vim-scripts/sudo.vim'

" surround.vim
NeoBundle 'tpope/vim-surround'

" lightline.vim
NeoBundle 'itchyny/lightline.vim'

" vim-easymotion
NeoBundle 'Lokaltog/vim-easymotion'

" vimproc
NeoBundle 'Shougo/vimproc', {
\ 'build' : {
\     'mac'     : 'make -f make_mac.mak',
\     'unix'    : 'make -f make_unix.mak',
\    },
\ }

" ctrlp.vim
NeoBundle 'ctrlpvim/ctrlp.vim'

" syntastic
" NeoBundle 'scrooloose/syntastic'

" switch.vim
NeoBundleLazy 'AndrewRadev/switch.vim', {
\   "autoload" : {
\       "commands" : "Switch"
\   }
\}

" vim-fakeclip
NeoBundle 'kana/vim-fakeclip'

" emmet-vim
NeoBundleLazy 'mattn/emmet-vim', {
\   "autoload" : {
\       "filetypes" : "html"
\   }
\}

" vim-textobj-user
NeoBundleLazy 'kana/vim-textobj-user', {
\   "autoload" : {
\       "functions" : "textobj#user#plugin"
\   }
\}

" DrawIt
NeoBundleLazy 'vim-scripts/DrawIt', {
\   "autoload" : {
\       "mappings" : "<Plug>DrawItStart"
\   }
\}

" vim-textmanip
NeoBundleLazy 't9md/vim-textmanip', {
\   "autoload" : {
\       "mappings" : [
\           '<Plug>(textmanip-move-down)',
\           '<Plug>(textmanip-move-up)',
\           '<Plug>(textmanip-move-left)',
\           '<Plug>(textmanip-move-right)',
\           '<Plug>(textmanip-duplicate-down)',
\           '<Plug>(textmanip-duplicate-up)'
\       ]
\   }
\}

" vim-textobj-entire
NeoBundle 'kana/vim-textobj-entire'

" vim-textobj-indent
NeoBundle 'kana/vim-textobj-indent'

" vim-textobj-line
NeoBundle 'kana/vim-textobj-line'

NeoBundleLazy "jmcantrell/vim-virtualenv", {
\ "autoload": {
\   "filetypes": ["python", "python3"]
\ }}

NeoBundleLazy 'vim-scripts/Align', {
\   "autoload" : {
\       "commands" : "Align"
\   }
\}

" QFixHowm
NeoBundle 'fuenor/qfixhowm'

" neomru
NeoBundleLazy 'Shougo/neomru.vim', {
\   "depends" : "Shougo/unite.vim",
\   "autoload" : {
\       "unite_sources" : "file_mru"
\   }
\}

" unite-gtags
NeoBundleLazy 'hewes/unite-gtags', {
\   "depends" : "Shougo/unite.vim",
\   "autoload" : {
\       "unite_sources" : ["gtags/context", "gtags/ref", "gtags/def", "gtags/grep", "gtags/completion"]
\   }
\}

NeoBundleLazy 'LeafCage/yankround.vim', {
\   "autoload" : {
\       "mappings" : [
\           "<Plug>(yankround"
\       ],
\       "unite_sources" : ["yankround"],
\       "commands" : ["CtrlPYankRound"],
\   }
\}

NeoBundleLazy 'soramugi/auto-ctags.vim', {
\   "autoload": {
\       "filetypes": ["php", "c", "cpp", "python", "javascript"]
\ }}

NeoBundleLazy 'tsukkee/unite-tag', {
\   'autoload' : {
\       'unite_sources' : ['tag', 'tag/file', 'tag/include']
\   }
\}

NeoBundle 'sheerun/vim-polyglot'

NeoBundle 'sgur/vim-lazygutter'

NeoBundle 'FelikZ/ctrlp-py-matcher', {
\   'depends' : 'ctrlpvim/ctrlp.vim'
\}

NeoBundle 'haya14busa/incsearch.vim'
NeoBundle 'haya14busa/incsearch-fuzzy.vim'

NeoBundle "jceb/vim-hier"
NeoBundle "osyo-manga/shabadou.vim"
NeoBundle "dannyob/quickfixstatus"
NeoBundle "osyo-manga/vim-watchdogs"

NeoBundle 'syngan/vim-vimlint', {
    \ 'depends' : 'ynkdir/vim-vimlparser'}

"--------------------
" color scheme
NeoBundleLazy 'ujihisa/unite-colorscheme', {
\   "depends" : "Shougo/unite.vim",
\   "autoload" : {
\       "unite_sources" : "colorscheme"
\   }
\}

NeoBundle 'tomasr/molokai'

"--------------------

filetype plugin indent on     " Required!

" Installation check.
if neobundle#exists_not_installed_bundles()
echomsg 'Not installed bundles : ' .
     \ string(neobundle#get_not_installed_bundle_names())
echomsg 'Please execute ":NeoBundleInstall" command.'
endif

"----------------------------------------
" unite.vim
"----------------------------------------

" インサートモードで開始する
let g:unite_enable_start_insert=1

let g:unite_source_history_yank_enable = 1

" プロジェクトルートに移動
nnoremap <Leader>cd :execute 'cd' unite#util#path2project_directory(getcwd())<CR>

" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" ヤンク一覧
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>

" grep検索
nnoremap <silent> ,ucg  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
nnoremap <silent> ,ug  :execute 'Unite' 'grep:'.unite#util#path2project_directory(getcwd()).' -buffer-name=search-buffer'<CR>
" カーソル位置の単語をgrep検索
nnoremap <silent> ,/ucg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
nnoremap <silent> ,/ug  :execute 'Unite' 'grep:'.unite#util#path2project_directory(getcwd()).' -buffer-name=search-buffer'<CR><C-R><C-W>

if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column --ignore-case'
    let g:unite_source_grep_recursive_opt = ''
endif

"----------------------------------------
" unite-outline
"----------------------------------------

" ソースの関数一覧表示
nnoremap <silent> ,uo :<C-u>Unite outline<CR>
" ソースの関数一覧を上下分割で常に表示
nnoremap <silent> ,uho :<C-u>Unite -winheight=15 -no-quit outline<CR>
" ソースの関数一覧を左右分割で常に表示
nnoremap <silent> ,uvo :<C-u>Unite -vertical -winwidth=25 -no-quit outline<CR>

"----------------------------------------
" neocomplete
"----------------------------------------

if neobundle#is_installed('neocomplete')

inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

let s:bundle = neobundle#get("neocomplete")
function! s:bundle.hooks.on_source(bundle)

let g:neocomplete#enable_at_startup  = 1
let g:neocomplete#max_list = 10
let g:neocomplete#auto_completion_start_length = 4
let g:neocomplete#min_keyword_length = 4
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case  = 1
let g:neocomplete#enable_fuzzy_completion = 1
let g:neocomplete#skip_auto_completion_time = '0.2'
let g:neocomplete#sources#syntax#min_keyword_length = 4

if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns._ = '\h\w*'

endfunction
unlet s:bundle

endif

"----------------------------------------
" neocomplcache
"----------------------------------------

if neobundle#is_installed('neocomplcache')

" タブキーで補完
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
" 補完ウィンドウが正しく閉じられるようにする
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

let s:bundle = neobundle#get("neocomplcache")
function! s:bundle.hooks.on_source(bundle)

" 自動的に開始
let g:neocomplcache_enable_at_startup = 1
" 自動補完は無効
" let g:neocomplcache_disable_auto_complete = 1
" 自動保管を行う入力数
let g:neocomplcache_auto_completion_start_length = 4
" バッファの補完を3文字目から開始
let g:neocomplcache_min_keyword_length = 4
" シンタックスファイルからの補完を4文字目から開始
let g:neocomplcache_min_syntax_length = 4
" 大文字が入力されるまで大文字小文字を区別しない
let g:neocomplcache_enable_camel_case_completion = 1
" アンダーバー補完を有効化
let g:neocomplcache_enable_underbar_completion = 1
" 候補の最大数
let g:neocomplcache_max_list = 10

let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default'    : '',
    \ 'perl'       : $HOME . '/.vim/dict/perl.dict'
    \ }

if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

endfunction
unlet s:bundle

endif

"----------------------------------------
" neosnippet
"----------------------------------------

imap <C-j> <plug>(neosnippet_expand_or_jump)
smap <C-j> <plug>(neosnippet_expand_or_jump)

let s:bundle = neobundle#get("neosnippet")
function! s:bundle.hooks.on_source(bundle)

let g:neosnippet#snippets_directory= '~/.vim/snippets'

if has('conceal')
    set conceallevel=2 concealcursor=i
 endif

endfunction
unlet s:bundle

"----------------------------------------
" indentLine
"----------------------------------------

let g:indentLine_color_term = 240

"----------------------------------------
" NERDTree
"----------------------------------------

" ,nt でNERDTreeを開く
nnoremap <silent> ,nt :NERDTreeToggle<CR>

" 除外ファイル
let NERDTreeIgnore = ['\~$', '\.pyc$', '\.sw[a-z]']

"----------------------------------------
" easymotion
"----------------------------------------

" 候補キーをアルファベットのみにする
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" easymotionのLeader設定
let g:EasyMotion_leader_key="\\"
" 1 ストローク選択を優先する
" let g:EasyMotion_grouping=1
" カラー設定
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue

"----------------------------------------
" vim-quickrun
"----------------------------------------

nmap <Leader>r <Plug>(quickrun)

let g:quickrun_config = {
\    "_" : {
\       'runner' : 'vimproc'
\    },
\   "markdown" : {
\       'outputter/buffer/close_on_empty' : 1,
\       'command' : 'open',
\       'cmdopt'  : '-a',
\       'args'    : 'Marked',
\       'exec'    : '%c %o %a %s',
\    },
\   "watchdogs_checker/_" : {
\       "runner/vimproc/updatetime" : 50,
\   },
\}

"----------------------------------------
" unite-colorscheme
"----------------------------------------

nnoremap <silent> ,uc :<C-u>Unite colorscheme -auto-preview<CR>

"----------------------------------------
" unite-build
"----------------------------------------

nnoremap <silent> ,m :<C-u>Unite build:!<CR>

"----------------------------------------
" ctrlp
"----------------------------------------

let g:ctrlp_map = ',p'

let g:ctrlp_max_files = 0
let g:ctrlp_lazy_update = 10
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden --ignore .git --ignore .svn --ignore .hg --ignore .DS_Store --ignore "**/*.pyc" -g ""'
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }


"----------------------------------------
" syntastic
"----------------------------------------

" " marker
" let g:syntastic_error_symbol='✗'
" let g:syntastic_warning_symbol='⚠'
" let g:syntastic_style_error_symbol = '✗'
" let g:syntastic_style_warning_symbol = '⚠'
"
" " require jshint or gjslint
" " npm install -g jshint
" " easy_install http://closure-linter.googlecode.com/files/closure_linter-latest.tar.gz
" " let g:syntastic_javascript_checker = "jshint"
" let g:syntastic_javascript_checker = "gjslint"
"
" let g:syntastic_python_checkers = ['pyflakes', 'pep8']

"----------------------------------------
" uncrustify
"----------------------------------------

" see http://stackoverflow.com/questions/12374200/using-uncrustify-with-vim/15513829#15513829

" uncrustifyの設定ファイル
let g:uncrustify_cfg_file_path = '~/.uncrustifyconfig'

" Shift-Fでコードのフォーマットを行う．
nnoremap <S-f> :call UncrustifyAuto()<CR>

" Restore cursor position, window position, and last search after running a
" command.
function! Preserve(command)
    " Save the last search.
    let search = @/
    " Save the current cursor position.
    let cursor_position = getpos('.')
    " Save the current window position.
    normal! H
    let window_position = getpos('.')
    call setpos('.', cursor_position)
    " Execute the command.
    execute a:command
    " Restore the last search.
    let @/ = search
    " Restore the previous window position.
    call setpos('.', window_position)
    normal! zt
    " Restore the previous cursor position.
    call setpos('.', cursor_position)
endfunction

" Don't forget to add Uncrustify executable to $PATH (on Unix) or
" %PATH% (on Windows) for this command to work.
function! Uncrustify(language)
    call Preserve(':silent %!uncrustify'.' -q '.' -l '.a:language.' -c '.
                \shellescape(fnamemodify(g:uncrustify_cfg_file_path, ':p')))
endfunction

function! UncrustifyAuto()
    call Preserve(':silent %!uncrustify'.' -q '.' -c '.
                \shellescape(fnamemodify(g:uncrustify_cfg_file_path, ':p')))
endfunction

"----------------------------------------
" autopep8
"----------------------------------------
" require autopep8
" pip install autopep8

autocmd FileType python nnoremap <S-f> :call Autopep8()<CR>

function! Autopep8()
    call Preserve(':silent %!autopep8 --ignore=E501 -')
endfunction

"----------------------------------------
" switch.vim
"----------------------------------------

nnoremap - :Switch<cr>

"----------------------------------------
" gundo.vim
"----------------------------------------

nnoremap <Leader>u :<C-u>GundoToggle<CR>

"----------------------------------------
" vim-textobj-user
"----------------------------------------

" htmlタグとタグの間のテキストをオブジェクト化する
call textobj#user#plugin('html', {
\   'text': {
\     'pattern': ['>', '<'],
\     'select-a': 'a^',
\     'select-i': 'i^',
\   },
\ })

"----------------------------------------
" DrawIt
"----------------------------------------

map <unique> <Leader>di <Plug>DrawItStart

"----------------------------------------
" vim-textmanip
"----------------------------------------

xmap <S-j> <Plug>(textmanip-move-down)
xmap <S-k> <Plug>(textmanip-move-up)
xmap <S-h> <Plug>(textmanip-move-left)
xmap <S-l> <Plug>(textmanip-move-right)

map <Space>d <Plug>(textmanip-duplicate-down)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>D <Plug>(textmanip-duplicate-up)
nmap <Space>D <Plug>(textmanip-duplicate-up)

"----------------------------------------
" lightline.vim
"----------------------------------------

let g:lightline = {
\       'colorscheme': 'wombat',
\       'separator': { 'left': '⮀', 'right': '⮂' },
\       'subseparator': { 'left': '⮁⮁', 'right': '⮃⮃' },
\       'active': {
\           'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ],
\       },
\       'component_function': {
\           'fugitive': 'MyFugitive',
\           'filename': 'MyFilename',
\           'myreadonly': 'MyReadonly',
\       },
\}

function! MyModified()
    return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
    return &ft !~? 'help' && &ro ? '⭤' : ''
endfunction

function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
    \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
    \  &ft == 'unite' ? unite#get_status_string() :
    \  &ft == 'vimshell' ? vimshell#get_status_string() :
    \ '' != expand('%t') ? expand('%t') : '[No Name]') .
    \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
    return &ft !~? 'vimfiler' && exists("*fugitive#head") && strlen(fugitive#head()) ? '⭠ '.fugitive#head() : ''
endfunction

"----------------------------------------
" sudo.vim
"----------------------------------------

" w!!でスーパーユーザーとして保存
cmap w!! w sudo:%

"----------------------------------------
" vimfiler
"----------------------------------------

nnoremap <silent> ,vf :VimFilerExplorer<CR>

let s:hooks = neobundle#get_hooks("vimfiler")
function! s:hooks.on_source(bundle)
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_enable_auto_cd = 1
    let g:vimfiler_ignore_pattern = "\%(^\..*\|\.pyc$\)"
endfunction

"----------------------------------------
" QFixHowm
"----------------------------------------

let QFixHowm_Key = 'g'

let howm_dir             = '~/howm'
let howm_filename        = '%Y/%m/%Y-%m-%d-%H%M%S.md'
let howm_fileencoding    = 'utf-8'
let howm_fileformat      = 'unix'

let QFixHowm_FileType = 'markdown'
let QFixHowm_Title = '#:'

"----------------------------------------
" unite-gtags
"----------------------------------------

nnoremap <silent> ,gcon :<C-u>Unite gtags/context<CR>
nnoremap <silent> ,gr :<C-u>Unite gtags/ref<CR>
nnoremap <silent> ,gd :<C-u>Unite gtags/def<CR>
nnoremap <silent> ,gg :<C-u>Unite gtags/grep<CR>
nnoremap <silent> ,gcom :<C-u>Unite gtags/completion<CR>

"----------------------------------------
" yankround.vim'
"----------------------------------------

nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)

let s:hooks = neobundle#get_hooks("yankround.vim")
function! s:hooks.on_source(bundle)
    let g:yankround_dir = "~/.vim/.backup/yankround"
endfunction

"----------------------------------------
" Align
"----------------------------------------

vnoremap <silent> a> :Align =><CR>
vnoremap <silent> a= :Align =<CR>

"----------------------------------------
" unite-tag
"----------------------------------------

autocmd BufEnter *
\   if empty(&buftype)
\|     nnoremap <buffer> <C-]> :<C-u>UniteWithCursorWord -immediately tag<CR>
\|  endif

"----------------------------------------
" auto-ctags
"----------------------------------------

let s:bundle = neobundle#get("auto-ctags.vim")
function! s:bundle.hooks.on_source(bundle)

let project_root = unite#util#path2project_directory(getcwd())
let g:auto_ctags = 1
let g:auto_ctags_directory_list = [project_root.'/.git', project_root.'/.svn']
let g:auto_ctags_tags_args = '--tag-relative --append=yes --recurse=yes --sort=yes --links=no'
let g:auto_ctags_filetype_mode = 1

endfunction
unlet s:bundle

"----------------------------------------
" incsearch.vim and ext
"----------------------------------------

map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)

"----------------------------------------
" watchdogs
"----------------------------------------

let g:watchdogs_check_BufWritePost_enable = 1
let g:watchdogs_check_CursorHold_enable = 1
call watchdogs#setup(g:quickrun_config)
