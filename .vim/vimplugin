"---------------------------------------------------------------------------
" plugin settings
"---------------------------------------------------------------------------

"----------------------------------------
" NeoBundle
"----------------------------------------
set nocompatible
filetype off

if has('vim_starting')
set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

"--------------------
" my plugins

" NeoBundle
NeoBundle 'git://github.com/Shougo/neobundle.vim.git', { 'rev' : 'ver.2.1' }
" unite
NeoBundle 'git://github.com/Shougo/unite.vim.git'
" unite-outline
NeoBundle 'git://github.com/h1mesuke/unite-outline.git'
" unite-build
NeoBundle 'git://github.com/Shougo/unite-build.git'
" neocomplcache
NeoBundle 'git://github.com/Shougo/neocomplcache.git'
" neocomplcache-snippets-complete
NeoBundle 'git://github.com/Shougo/neosnippet.git'
" vimfiler
NeoBundle 'git://github.com/Shougo/vimfiler.git'
" vim-quickrun
NeoBundle 'git://github.com/thinca/vim-quickrun.git'
" vim-fugitive
NeoBundle 'git://github.com/tpope/vim-fugitive.git'
" YankRing
NeoBundle 'git://github.com/vim-scripts/YankRing.vim.git'
" Indent-Guides
NeoBundle 'git://github.com/vim-scripts/Indent-Guides.git'
" tComment
NeoBundle 'git://github.com/vim-scripts/tComment.git'
" sudo.vim
NeoBundle 'git://github.com/vim-scripts/sudo.vim.git'
" surround.vim
NeoBundle 'git://github.com/tpope/vim-surround.git'
" NERDTree.vim
NeoBundle 'git://github.com/scrooloose/nerdtree.git'
" vim-powerline
NeoBundle 'git://github.com/Lokaltog/vim-powerline.git'
" vim-easymotion
NeoBundle 'git://github.com/Lokaltog/vim-easymotion.git'
" vimproc
NeoBundle 'git://github.com/Shougo/vimproc.git', {
\ 'build' : {
\     'mac'     : 'make -f make_mac.mak',
\     'unix'    : 'make -f make_unix.mak',
\    },
\ }
" ctrlp.vim
NeoBundle 'git://github.com/kien/ctrlp.vim.git'
" vim-ref
NeoBundle 'git://github.com/thinca/vim-ref.git'
" syntastic
NeoBundle 'git://github.com/scrooloose/syntastic.git'
" ropevim
" require : rope, ropemode
" pip install rope ropemode
NeoBundle 'git://github.com/sontek/rope-vim'
" jedi-vim
NeoBundle 'git://github.com/davidhalter/jedi-vim.git'
" simple-javascript-indenter
NeoBundle 'git://github.com/jiangmiao/simple-javascript-indenter.git'
" vim-javascript-syntax
NeoBundle 'git://github.com/jelera/vim-javascript-syntax.git'
" jscomplete-vim
NeoBundle 'git://github.com/teramako/jscomplete-vim.git'
" vim-golang
NeoBundle 'git://github.com/jnwhiteh/vim-golang.git'
" bg.vim
NeoBundle 'git://github.com/yuratomo/bg.vim.git'

"--------------------
" color scheme
NeoBundle 'ujihisa/unite-colorscheme'

NeoBundle 'tomasr/molokai'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'jnurmine/Zenburn'
NeoBundle 'fugalh/desert.vim'
NeoBundle 'altercation/vim-colors-solarized'

"--------------------

filetype plugin indent on     " Required!

" Installation check.
if neobundle#exists_not_installed_bundles()
echomsg 'Not installed bundles : ' .
     \ string(neobundle#get_not_installed_bundle_names())
echomsg 'Please execute ":NeoBundleInstall" command.'
endif

"----------------------------------------
" unite
"----------------------------------------

" インサートモードで開始する
let g:unite_enable_start_insert=1
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

"----------------------------------------
" unite-outline
"----------------------------------------

" ソースの関数一覧表示
nnoremap <silent> ,uo :<C-u>Unite outline<CR>
" ソースの関数一覧を上下分割で常に表示
nnoremap <silent> ,uho :<C-u>Unite -winheight=15 -no-quit outline<CR>
" ソースの関数一覧を左右分割で常に表示
nnoremap <silent> ,uvo :<C-u>Unite -vertical -winwidth=25 -no-quit outline<CR>

"----------------------------------------
" neocomplcache
"----------------------------------------

" 自動的に開始
let g:neocomplcache_enable_at_startup = 1
" バッファの補完を2文字目から開始
let g:neocomplcache_min_keyword_length = 2
" シンタックスファイルからの補完を２文字目から開始
let g:neocomplcache_min_syntax_length = 2
" アンダーバー補完を有効化
let g:neocomplcache_enable_underbar_completion = 1
" タブキーで補完
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" 補完ウィンドウが正しく閉じられるようにする
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default'    : '',
    \ 'perl'       : $HOME . '/.vim/dict/perl.dict'
    \ }

if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"----------------------------------------
" neosnippet
"----------------------------------------

let g:neosnippet#snippets_directory= '~/.vim/snippets'
imap <C-j> <plug>(neosnippet_expand_or_jump)
smap <C-j> <plug>(neosnippet_expand_or_jump)

if has('conceal')
    set conceallevel=2 concealcursor=i
  endif

"----------------------------------------
" vimfile
"----------------------------------------

" vimfilerをデフォルトのファイラーとする
let g:vimfiler_as_default_explorer = 1

"----------------------------------------
" YankRing
"----------------------------------------

" 履歴の保存ファイルを指定
let g:yankring_history_dir = expand('$HOME')
let g:yankring_history_file = '.yankring_history'
" 最大保存件数
let g:yankring_max_history = 100
" 重複を許可しない
let g:yankring_ignore_duplicate = 1
" ウィンドウの高さ
let g:yankring_window_height = 20 
" F7でYRShowを実行
:nnoremap <silent> <F7> :YRShow<CR>

"----------------------------------------
" indent-guides
"----------------------------------------

" ハイライトをデフォルトで有効
let g:indent_guides_enable_on_vim_startup = 1
" 自動的なカラーをオフに
let g:indent_guides_auto_colors = 0
" ハイライトのサイズを小さく
let g:indent_guides_guide_size = 1
" 奇数インデントのカラー
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#888888 ctermbg=gray
" 偶数インデントのカラー
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#555555 ctermbg=darkgray

"----------------------------------------
" NERDTree
"----------------------------------------

" ,nt でNERDTreeを開く
nnoremap <silent> ,nt :NERDTreeToggle<CR>

"----------------------------------------
" vim-powerline
"----------------------------------------
" 正しく表示するにはvim-powerline用のパッチフォントを生成すること
" https://github.com/Lokaltog/vim-powerline

let g:Powerline_symbols='fancy'
set t_Co=256

"----------------------------------------
" easymotion
"----------------------------------------

" 候補キーをアルファベットのみにする
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" easymotionのLeader設定
let g:EasyMotion_leader_key="\\"
" 1 ストローク選択を優先する
" let g:EasyMotion_grouping=1
" カラー設定
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue

"----------------------------------------
" quickrun
"----------------------------------------

let g:quickrun_config = {'runner' : 'vimproc'}

let g:quickrun_config.markdown = {
    \ 'outputter/buffer/close_on_empty' : 1,
    \ 'command' : 'open',
    \ 'cmdopt'  : '-a',
    \ 'args'    : 'Marked',
    \ 'exec'    : '%c %o %a %s',
    \ }

"----------------------------------------
" unite-colorscheme
"----------------------------------------

nnoremap <silent> ,uc :<C-u>Unite colorscheme -auto-preview<CR>

"----------------------------------------
" unite-build
"----------------------------------------

nnoremap <silent> ,m :<C-u>Unite build:!<CR>

"----------------------------------------
" ctrlp
"----------------------------------------

let g:ctrlp_map = ',p'

"----------------------------------------
" syntastic
"----------------------------------------
" require jshint or gjslint
" npm install -g jshint
" easy_install http://closure-linter.googlecode.com/files/closure_linter-latest.tar.gz
" let g:syntastic_javascript_checker = "jshint"
let g:syntastic_javascript_checker = "gjslint"

"----------------------------------------
" jedi-vim
"----------------------------------------
let g:jedi#popup_on_dot = 0
let g:jedi#rename_command = "<leader>R"

"----------------------------------------
" simple-javascript-indenter
"----------------------------------------
let g:SimpleJsIndenter_CaseIndentLevel = -1

"----------------------------------------
" jscomplete-vim
"----------------------------------------
autocmd FileType javascript :setl omnifunc=jscomplete#CompleteJS

"----------------------------------------
" bg.vim
"----------------------------------------
" F5でmakeを行う
nnoremap <F5>  :Background make<CR>

"----------------------------------------
" uncrustify
"----------------------------------------
" see http://stackoverflow.com/questions/12374200/using-uncrustify-with-vim/15513829#15513829

" Shift-Fでコードのフォーマットを行う．
nnoremap <S-f> :call UncrustifyAuto()<CR>

" uncrustifyの設定ファイル
let g:uncrustify_cfg_file_path = '~/.uncrustifyconfig'

" uncrustifyでフォーマットする言語
let g:uncrustify_lang = ""
autocmd FileType c let g:uncrustify_lang = "c"
autocmd FileType cpp let g:uncrustify_lang = "cpp"
autocmd FileType java let g:uncrustify_lang = "java"
autocmd FileType objc let g:uncrustify_lang = "oc"
autocmd FileType cs let g:uncrustify_lang = "cs"

" Restore cursor position, window position, and last search after running a
" command.
function! Preserve(command)
    " Save the last search.
    let search = @/
    " Save the current cursor position.
    let cursor_position = getpos('.')
    " Save the current window position.
    normal! H
    let window_position = getpos('.')
    call setpos('.', cursor_position)
    " Execute the command.
    execute a:command
    " Restore the last search.
    let @/ = search
    " Restore the previous window position.
    call setpos('.', window_position)
    normal! zt
    " Restore the previous cursor position.
    call setpos('.', cursor_position)
endfunction

" Don't forget to add Uncrustify executable to $PATH (on Unix) or
" %PATH% (on Windows) for this command to work.
function! Uncrustify(language)
    call Preserve(':silent %!uncrustify'.' -q '.' -l '.a:language.' -c '.
                \shellescape(fnamemodify(g:uncrustify_cfg_file_path, ':p')))
endfunction

function! UncrustifyAuto()
    if g:uncrustify_lang != ""
        call Uncrustify(g:uncrustify_lang)
    else
        echo "not supported filetype"
    endif
endfunction

