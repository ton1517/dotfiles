"---------------------------------------------------------------------------
" plugin settings
"---------------------------------------------------------------------------

"----------------------------------------
" NeoBundle
"----------------------------------------
set nocompatible
filetype off

if has('vim_starting')
set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

"--------------------
" my plugins

" NeoBundle
NeoBundle 'Shougo/neobundle.vim'

" unite
NeoBundleLazy 'Shougo/unite.vim', {
\   "autoload" : {
\       "commands" : ["Unite", "UniteWithBufferDir"]
\   }
\}

" unite-outline
NeoBundleLazy 'Shougo/unite-outline', {
\   "depends" : "Shougo/unite.vim",
\   "autoload" : {
\       "unite_sources" : "outline"
\   }
\}

" unite-build
NeoBundleLazy 'Shougo/unite-build', {
\   "depends" : "Shougo/unite.vim",
\   "autoload" : {
\       "unite_sources" : "build"
\   }
\}

" neocomplcache
NeoBundleLazy 'Shougo/neocomplcache', {
\   "autoload" : {
\       "insert" : 1
\   }
\}

" neosnippet
NeoBundleLazy 'Shougo/neosnippet', {
\   "autoload" : {
\       "insert" : 1
\   }
\}

" vimfiler
NeoBundleLazy 'Shougo/vimfiler', {
\   'depends' : 'Shougo/unite.vim',
\   'autoload' : {
\       'commands' : [{ 'name' : 'VimFiler',
\                    'complete' : 'customlist,vimfiler#complete' },
\                  'VimFilerExplorer',
\                  'Edit', 'Read', 'Source', 'Write'],
\   'mappings' : ['<Plug>(vimfiler_switch)'],
\   'explorer' : 1,
\   }
\}

" vim-quickrun
NeoBundleLazy 'thinca/vim-quickrun', {
\   "autoload" : {
\       'mappings' : '<Plug>(quickrun)',
\       "commands" : "QuickRun"
\   }
\}

" vim-fugitive
NeoBundle 'tpope/vim-fugitive'

" YankRing
NeoBundle 'vim-scripts/YankRing.vim'

" Indent-Guides
NeoBundle 'vim-scripts/Indent-Guides'

" tComment
NeoBundle 'vim-scripts/tComment'

" sudo.vim
NeoBundle 'vim-scripts/sudo.vim'

" surround.vim
NeoBundle 'tpope/vim-surround'

" NERDTree.vim
NeoBundleLazy 'scrooloose/nerdtree', {
\   "autoload" : {
\       "commands" : "NERDTreeToggle"
\   }
\}

" lightline.vim
NeoBundle 'itchyny/lightline.vim'

" vim-easymotion
NeoBundle 'Lokaltog/vim-easymotion'

" vimproc
NeoBundle 'Shougo/vimproc', {
\ 'build' : {
\     'mac'     : 'make -f make_mac.mak',
\     'unix'    : 'make -f make_unix.mak',
\    },
\ }

" ctrlp.vim
NeoBundleLazy 'kien/ctrlp.vim', {
\   "autoload" : {
\       "commands" : "CtrlP"
\   }
\}

" vim-ref
NeoBundleLazy 'thinca/vim-ref', {
\   "autoload" : {
\       "commands" : "Ref"
\   }
\}


" syntastic
NeoBundle 'scrooloose/syntastic'

" ropevim
NeoBundleLazy 'sontek/rope-vim', {
\   "build" : {
\       "others" : "pip install rope ropemode"
\   },
\   "autoload" : {
\       "filetypes" : "python"
\   }
\}

" jedi-vim
NeoBundleLazy 'davidhalter/jedi-vim', {
\   "build" : {
\       "others" : "git submodule update --init"
\   },
\   "autoload" : {
\       "filetypes" : "python"
\   }
\}

" simple-javascript-indenter
NeoBundleLazy 'jiangmiao/simple-javascript-indenter', {
\   "autoload" : {
\       "filetypes" : "javascript"
\   }
\}

" vim-javascript-syntax
NeoBundleLazy 'jelera/vim-javascript-syntax', {
\   "autoload" : {
\       "filetypes" : "javascript"
\   }
\}


" vim-golang
NeoBundleLazy 'jnwhiteh/vim-golang', {
\   "autoload" : {
\       "filetypes" : "go"
\   }
\}

" bg.vim
NeoBundleLazy 'yuratomo/bg.vim', {
\   "autoload" : {
\       "commands" : "Background"
\   }
\}

" tagbar
NeoBundleLazy 'majutsushi/tagbar', {
\   "build" : {
\       "mac" : "brew install ctags"
\   },
\   "autoload" : {
\       "commands" : "TagbarToggle"
\   }
\}

" vaxe
NeoBundleLazy 'jdonaldson/vaxe', {
\   "autoload" : {
\       "filetypes" : "haxe"
\   }
\}

" switch.vim
NeoBundleLazy 'AndrewRadev/switch.vim', {
\   "autoload" : {
\       "commands" : "Switch"
\   }
\}

" gundo.vim
NeoBundleLazy 'sjl/gundo.vim', {
\   "autoload" : {
\       "commands" : "GundoToggle"
\   }
\}

" vim-fakeclip
NeoBundle 'kana/vim-fakeclip'

" zencoding-vim
NeoBundleLazy 'mattn/zencoding-vim', {
\   "autoload" : {
\       "filetypes" : "html"
\   }
\}

" vim-textobj-user
NeoBundleLazy 'kana/vim-textobj-user', {
\   "autoload" : {
\       "functions" : "textobj#user#plugin"
\   }
\}

" open-browser.vim
NeoBundleLazy 'tyru/open-browser.vim', {
\   "autoload" : {
\       "mappings" : [
\           "<Plug>(openbrowser-smart-search)",
\           "<Plug>(openbrowser-open)",
\           "<Plug>(openbrowser-search)"
\       ]
\   }
\}

" DrawIt
NeoBundleLazy 'vim-scripts/DrawIt', {
\   "autoload" : {
\       "mappings" : "<Plug>DrawItStart"
\   }
\}

" vim-textmanip
NeoBundleLazy 't9md/vim-textmanip', {
\   "autoload" : {
\       "mappings" : [
\           '<Plug>(textmanip-move-down)',
\           '<Plug>(textmanip-move-up)',
\           '<Plug>(textmanip-move-left)',
\           '<Plug>(textmanip-move-right)',
\           '<Plug>(textmanip-duplicate-down)',
\           '<Plug>(textmanip-duplicate-up)'
\       ]
\   }
\}

" previm
NeoBundleLazy 'kannokanno/previm', {
\   "depends" : "tyru/open-browser.vim",
\   "autoload" : {
\       "filetypes" : "markdown"
\   }
\}

" vim-textobj-entire
NeoBundle 'kana/vim-textobj-entire'

" vim-textobj-indent
NeoBundle 'kana/vim-textobj-indent'

" vim-textobj-line
NeoBundle 'kana/vim-textobj-line'

NeoBundleLazy "jmcantrell/vim-virtualenv", {
\ "autoload": {
\   "filetypes": ["python", "python3"]
\ }}

NeoBundle 'ervandew/supertab'

"--------------------
" color scheme
NeoBundleLazy 'ujihisa/unite-colorscheme', {
\   "depends" : "Shougo/unite.vim",
\   "autoload" : {
\       "unite_sources" : "colorscheme"
\   }
\}

NeoBundle 'tomasr/molokai'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'jnurmine/Zenburn'
NeoBundle 'fugalh/desert.vim'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'vim-scripts/rdark'

"--------------------

filetype plugin indent on     " Required!

" Installation check.
if neobundle#exists_not_installed_bundles()
echomsg 'Not installed bundles : ' .
     \ string(neobundle#get_not_installed_bundle_names())
echomsg 'Please execute ":NeoBundleInstall" command.'
endif

"----------------------------------------
" unite.vim
"----------------------------------------

let s:bundle = neobundle#get("unite.vim")
function! s:bundle.hooks.on_source(bundle)

" インサートモードで開始する
let g:unite_enable_start_insert=1

let g:unite_source_history_yank_enable = 1

endfunction
unlet s:bundle

" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" ヤンク一覧
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>

" grep検索
nnoremap <silent> ,ug  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" カーソル位置の単語をgrep検索
nnoremap <silent> ,/ug :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>

if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column --ignore-case'
    let g:unite_source_grep_recursive_opt = ''
endif

"----------------------------------------
" unite-outline
"----------------------------------------

" ソースの関数一覧表示
nnoremap <silent> ,uo :<C-u>Unite outline<CR>
" ソースの関数一覧を上下分割で常に表示
nnoremap <silent> ,uho :<C-u>Unite -winheight=15 -no-quit outline<CR>
" ソースの関数一覧を左右分割で常に表示
nnoremap <silent> ,uvo :<C-u>Unite -vertical -winwidth=25 -no-quit outline<CR>

"----------------------------------------
" neocomplcache
"----------------------------------------

" タブキーで補完
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" 補完ウィンドウが正しく閉じられるようにする
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

let s:bundle = neobundle#get("neocomplcache")
function! s:bundle.hooks.on_source(bundle)

" 自動的に開始
let g:neocomplcache_enable_at_startup = 1
" バッファの補完を2文字目から開始
let g:neocomplcache_min_keyword_length = 2
" シンタックスファイルからの補完を２文字目から開始
let g:neocomplcache_min_syntax_length = 2
" アンダーバー補完を有効化
let g:neocomplcache_enable_underbar_completion = 1

let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default'    : '',
    \ 'perl'       : $HOME . '/.vim/dict/perl.dict'
    \ }

if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.haxe = '\v([\]''"\)]|\w|(^\s*))(\.|\()'

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

endfunction
unlet s:bundle

"----------------------------------------
" neosnippet
"----------------------------------------

imap <C-j> <plug>(neosnippet_expand_or_jump)
smap <C-j> <plug>(neosnippet_expand_or_jump)

let s:bundle = neobundle#get("neosnippet")
function! s:bundle.hooks.on_source(bundle)

let g:neosnippet#snippets_directory= '~/.vim/snippets'

if has('conceal')
    set conceallevel=2 concealcursor=i
 endif

endfunction
unlet s:bundle

"----------------------------------------
" YankRing
"----------------------------------------

" " 履歴の保存ファイルを指定
" let g:yankring_history_dir = expand('$HOME')
" let g:yankring_history_file = '.yankring_history'
" " 最大保存件数
" let g:yankring_max_history = 100
" " 重複を許可しない
" let g:yankring_ignore_duplicate = 1
" " ウィンドウの高さ
" let g:yankring_window_height = 20 
" " F7でYRShowを実行
" :nnoremap <silent> <F7> :YRShow<CR>

"----------------------------------------
" indent-guides
"----------------------------------------

" ハイライトをデフォルトで有効
let g:indent_guides_enable_on_vim_startup = 1
" 自動的なカラーをオフに
let g:indent_guides_auto_colors = 0
" ハイライトのサイズを小さく
let g:indent_guides_guide_size = 1
" 奇数インデントのカラー
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#888888 ctermbg=gray
" 偶数インデントのカラー
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#555555 ctermbg=darkgray

"----------------------------------------
" NERDTree
"----------------------------------------

" ,nt でNERDTreeを開く
nnoremap <silent> ,nt :NERDTreeToggle<CR>

" 除外ファイル
let NERDTreeIgnore = ['\~$', '\.pyc$', '\.sw[a-z]']

"----------------------------------------
" vim-powerline
"----------------------------------------

" 正しく表示するにはvim-powerline用のパッチフォントを生成すること
" https://github.com/Lokaltog/vim-powerline

let g:Powerline_symbols='fancy'
set t_Co=256

"----------------------------------------
" easymotion
"----------------------------------------

" 候補キーをアルファベットのみにする
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" easymotionのLeader設定
let g:EasyMotion_leader_key="\\"
" 1 ストローク選択を優先する
" let g:EasyMotion_grouping=1
" カラー設定
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue

"----------------------------------------
" vim-quickrun
"----------------------------------------

nmap <Leader>r <Plug>(quickrun)

let s:bundle = neobundle#get("vim-quickrun")
function! s:bundle.hooks.on_source(bundle)

let g:quickrun_config = {
\    "_" : {
\       'runner' : 'vimproc'
\    },
\   "markdown" : {
\       'outputter/buffer/close_on_empty' : 1,
\       'command' : 'open',
\       'cmdopt'  : '-a',
\       'args'    : 'Marked',
\       'exec'    : '%c %o %a %s',
\    },
\}

endfunction
unlet s:bundle

"----------------------------------------
" unite-colorscheme
"----------------------------------------

nnoremap <silent> ,uc :<C-u>Unite colorscheme -auto-preview<CR>

"----------------------------------------
" unite-build
"----------------------------------------

nnoremap <silent> ,m :<C-u>Unite build:!<CR>

"----------------------------------------
" ctrlp
"----------------------------------------

nnoremap <silent> ,p :<C-U>CtrlP<CR>

"----------------------------------------
" syntastic
"----------------------------------------

" require jshint or gjslint
" npm install -g jshint
" easy_install http://closure-linter.googlecode.com/files/closure_linter-latest.tar.gz
" let g:syntastic_javascript_checker = "jshint"
let g:syntastic_javascript_checker = "gjslint"

"----------------------------------------
" jedi-vim
"----------------------------------------

let s:bundle = neobundle#get("jedi-vim")
function! s:bundle.hooks.on_source(bundle)

autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType python setlocal completeopt-=preview

let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_select_first = 0
" let g:jedi#popup_on_dot = 0

let g:jedi#rename_command = "<leader>R"
let g:jedi#goto_command = '<Leader>G'

endfunction
unlet s:bundle

"----------------------------------------
" simple-javascript-indenter
"----------------------------------------

let s:bundle = neobundle#get("simple-javascript-indenter")
function! s:bundle.hooks.on_source(bundle)

let g:SimpleJsIndenter_CaseIndentLevel = -1

endfunction
unlet s:bundle

"----------------------------------------
" bg.vim
"----------------------------------------

" F5でmakeを行う
nnoremap <F5>  :Background make<CR>

"----------------------------------------
" uncrustify
"----------------------------------------

" see http://stackoverflow.com/questions/12374200/using-uncrustify-with-vim/15513829#15513829

" Shift-Fでコードのフォーマットを行う．
nnoremap <S-f> :call UncrustifyAuto()<CR>

" uncrustifyの設定ファイル
let g:uncrustify_cfg_file_path = '~/.uncrustifyconfig'

" uncrustifyでフォーマットする言語
let g:uncrustify_lang = ""
autocmd FileType c let g:uncrustify_lang = "c"
autocmd FileType cpp let g:uncrustify_lang = "cpp"
autocmd FileType java let g:uncrustify_lang = "java"
autocmd FileType objc let g:uncrustify_lang = "oc"
autocmd FileType cs let g:uncrustify_lang = "cs"

" Restore cursor position, window position, and last search after running a
" command.
function! Preserve(command)
    " Save the last search.
    let search = @/
    " Save the current cursor position.
    let cursor_position = getpos('.')
    " Save the current window position.
    normal! H
    let window_position = getpos('.')
    call setpos('.', cursor_position)
    " Execute the command.
    execute a:command
    " Restore the last search.
    let @/ = search
    " Restore the previous window position.
    call setpos('.', window_position)
    normal! zt
    " Restore the previous cursor position.
    call setpos('.', cursor_position)
endfunction

" Don't forget to add Uncrustify executable to $PATH (on Unix) or
" %PATH% (on Windows) for this command to work.
function! Uncrustify(language)
    call Preserve(':silent %!uncrustify'.' -q '.' -l '.a:language.' -c '.
                \shellescape(fnamemodify(g:uncrustify_cfg_file_path, ':p')))
endfunction

function! UncrustifyAuto()
    if g:uncrustify_lang != ""
        call Uncrustify(g:uncrustify_lang)
    else
        echo "not supported filetype"
    endif
endfunction

"----------------------------------------
" tagbar
"----------------------------------------

nnoremap <silent> ,tb :TagbarToggle<CR>

"----------------------------------------
" switch.vim
"----------------------------------------

nnoremap - :Switch<cr>

"----------------------------------------
" gundo.vim
"----------------------------------------

nnoremap <Leader>u :<C-u>GundoToggle<CR>

"----------------------------------------
" vim-textobj-user
"----------------------------------------

" htmlタグとタグの間のテキストをオブジェクト化する
call textobj#user#plugin('html', {
\   'text': {
\     'pattern': ['>', '<'],
\     'select-a': 'a>',
\     'select-i': 'i>',
\   },
\ })

"----------------------------------------
" open-browser.vim
"----------------------------------------

let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

"----------------------------------------
" DrawIt
"----------------------------------------

map <unique> <Leader>di <Plug>DrawItStart

"----------------------------------------
" vim-textmanip
"----------------------------------------

xmap <S-j> <Plug>(textmanip-move-down)
xmap <S-k> <Plug>(textmanip-move-up)
xmap <S-h> <Plug>(textmanip-move-left)
xmap <S-l> <Plug>(textmanip-move-right)

map <Space>d <Plug>(textmanip-duplicate-down)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>D <Plug>(textmanip-duplicate-up)
nmap <Space>D <Plug>(textmanip-duplicate-up)

"----------------------------------------
" lightline.vim
"----------------------------------------

let g:lightline = {
\       'colorscheme': 'wombat',
\       'separator': { 'left': '⮀', 'right': '⮂' },
\       'subseparator': { 'left': '⮁⮁', 'right': '⮃⮃' },
\       'active': {
\           'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ],
\       },
\       'component_function': {
\           'fugitive': 'MyFugitive',
\           'filename': 'MyFilename',
\           'myreadonly': 'MyReadonly',
\       },
\}

function! MyModified()
    return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
    return &ft !~? 'help' && &ro ? '⭤' : ''
endfunction

function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
    \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
    \  &ft == 'unite' ? unite#get_status_string() :
    \  &ft == 'vimshell' ? vimshell#get_status_string() :
    \ '' != expand('%t') ? expand('%t') : '[No Name]') .
    \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
    return &ft !~? 'vimfiler' && exists("*fugitive#head") && strlen(fugitive#head()) ? '⭠ '.fugitive#head() : ''
endfunction

"----------------------------------------
" sudo.vim
"----------------------------------------

" w!!でスーパーユーザーとして保存
cmap w!! w sudo:%

"----------------------------------------
" supertab
"----------------------------------------

let g:SuperTabDefaultCompletionType = "<c-n>"
