[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'sainnhe/sonokai'
hook_add = '''
let g:sonokai_style = 'default'
let g:sonokai_disable_italic_comment = 1
let g:sonokai_better_performance = 1

au MyAutoCmd VimEnter * nested colorscheme sonokai
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_map_keys = 0
let g:gitgutter_sign_added              = ''
let g:gitgutter_sign_modified           = ''
let g:gitgutter_sign_removed            = ''
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'numToStr/Comment.nvim'
hook_add = '''
lua << EOF
require('Comment').setup()
EOF
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
imap <C-j> <plug>(neosnippet_expand_or_jump)
smap <C-j> <plug>(neosnippet_expand_or_jump)
xmap <C-j> <Plug>(neosnippet_expand_target)

imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

let g:neosnippet#snippets_directory= '~/.vim/snippets'

if has('conceal')
    set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add='''
nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>

let g:ale_disable_lsp = 1

let g:ale_sign_error = "\uf05e"
let g:ale_sign_warning = "\uf071"
let g:ale_sign_column_always = 1

let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_linters = {
\   'go': ['golint', 'govet', 'golangci-lint'],
\   'css': ['stylelint'],
\   'scss': ['stylelint'],
\   'json': ['jq'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint'],
\   'vue': ['eslint', 'stylelint']
\ }

let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   'dart': ['dart-format'],
\   'go': ['goimports'],
\   'css': ['stylelint'],
\   'scss': ['stylelint'],
\   'json': ['jq'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint'],
\   'vue': ['eslint', 'stylelint']
\}

let g:ale_dart_format_options = '--line-length 140'
let g:ale_go_golangci_lint_options = ''
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add='''
let g:loaded_matchparen = 1
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
hook_add = '''
map <S-r> <Plug>(operator-replace)
'''

[[plugins]]
repo = 'goolord/alpha-nvim'
depends = 'nvim-web-devicons'
hook_add = '''
lua require'alpha'.setup(require'alpha.themes.startify'.config)
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope-project.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = ['plenary.nvim']
hook_add = '''
nnoremap ,p  <cmd>Telescope find_files find_command=rg,--no-ignore-dot,--hidden,-g,!.git/,--files<cr>
nnoremap ,ff <cmd>Telescope find_files find_command=rg,--no-ignore-dot,--hidden,-g,!.git/,--files<cr>
nnoremap ,fo <cmd>Telescope oldfiles<cr>
nnoremap ,fg <cmd>Telescope live_grep<cr>
nnoremap ,fG <cmd>Telescope grep_string<cr>
nnoremap ,fb <cmd>Telescope buffers<cr>
nnoremap ,fh <cmd>Telescope help_tags<cr>
nnoremap ,fp <cmd>lua require('telescope').extensions.project.project{}<cr>

nnoremap ,gs <cmd>Telescope git_status<cr>

lua <<EOL
local actions = require("telescope.actions")
require("telescope").setup{
  defaults = {
    vimgrep_arguments = {
      "rg",
      "--no-ignore-dot",
      "--hidden",
      "-g=!.git/",
      "--color=never",
      "--no-heading",
      "--with-filename",
      "--line-number",
      "--column",
      "--smart-case"
    },
    mappings = {
      i = {
        ["<esc>"] = actions.close,
      },
      n = {
        ["<C-c>"] = actions.close,
        ["q"] = actions.close,
      },
    },
  },
}

require('telescope').load_extension('project')
EOL
'''

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
depends = 'nvim-web-devicons'
hook_add = '''
lua << EOF
require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'auto',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {},
    always_divide_middle = true,
    globalstatus = false,
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {
      'branch',
      'diff',
      {
        'diagnostics',
        sources = { 'nvim_diagnostic', 'coc', 'ale' },
      },
    },
    lualine_c = {'filename'},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
    tabline = {
      lualine_a = {'buffers'},
      lualine_b = {},
      lualine_c = {},
      lualine_x = {},
      lualine_y = {},
      lualine_z = {}
    },
  extensions = {}
}
EOF
'''
