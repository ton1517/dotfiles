[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'sainnhe/sonokai'
hook_add = '''
let g:sonokai_style = 'default'
let g:sonokai_disable_italic_comment = 1

au MyAutoCmd VimEnter * nested colorscheme sonokai
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.vim/rc/plugins/lightline.rc.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_map_keys = 0
let g:gitgutter_sign_added              = ''
let g:gitgutter_sign_modified           = ''
let g:gitgutter_sign_removed            = ''
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
nmap <silent> <Leader>r <Plug>(quickrun)

let g:quickrun_config = {
\   "_" : {
\       'runner' : 'vimproc',
\       'runner/vimproc/updatetime' : 100,
\   },
\   "markdown" : {
\       'outputter/buffer/close_on_empty' : 1,
\       'command' : 'open',
\       'cmdopt'  : '-a',
\       'args'    : 'Marked',
\       'exec'    : '%c %o %a %s',
\    },
\}
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
let g:yankround_dir = "~/.cache/yankround"
let g:yankround_use_region_hl = 1
let g:yankround_max_history = 30

nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
" disable mapping
let g:tcomment_mapleader1 = ''
let g:tcomment_mapleader2 = ''
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
imap <C-j> <plug>(neosnippet_expand_or_jump)
smap <C-j> <plug>(neosnippet_expand_or_jump)
xmap <C-j> <Plug>(neosnippet_expand_target)

imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

let g:neosnippet#snippets_directory= '~/.vim/snippets'

if has('conceal')
    set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
hook_add = '''
nnoremap <silent> ,vf :VimFilerExplorer<CR>
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_enable_auto_cd = 1
let g:vimfiler_ignore_pattern = ['^\.git$', '^\.DS_Store$', '\.pyc$']
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add='''
nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>

let g:ale_disable_lsp = 1

let g:ale_sign_error = "\uf05e"
let g:ale_sign_warning = "\uf071"
let g:ale_sign_column_always = 1

let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_linters = {
\   'go': ['golint', 'govet', 'golangci-lint'],
\   'css': ['stylelint'],
\   'scss': ['stylelint'],
\   'javascript': ['eslint'],
\   'vue': ['eslint', 'stylelint']
\ }

let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   'go': ['goimports'],
\   'css': ['stylelint'],
\   'scss': ['stylelint'],
\   'javascript': ['eslint'],
\   'vue': ['eslint', 'stylelint']
\}

let g:ale_go_golangci_lint_options = ''
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
on_if = '!has("nvim")'
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add='''
let g:loaded_matchparen = 1
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add='''
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add='''
let g:rainbow_active = 1
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
hook_add = '''
map <S-r> <Plug>(operator-replace)
'''

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add='''
let g:ackhighlight = 1

cnoreabbrev Ack Ack!
nnoremap <Leader>g :Ack!<Space>
vnoremap <Leader>g y:Ack! <C-r>=fnameescape(@")<CR><CR>

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'maximbaz/lightline-ale'
hook_add = '''
let g:lightline#ale#indicator_checking = "\uf110 "
let g:lightline#ale#indicator_infos = "\uf129 "
let g:lightline#ale#indicator_warnings = "\uf071 "
let g:lightline#ale#indicator_errors = "\uf05e "
let g:lightline#ale#indicator_ok = "\uf00c "
'''

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
function! s:gitModified()
    let files = systemlist('git ls-files -m 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction

function! s:gitUntracked()
    let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction

let g:startify_lists = [
    \ { 'type': 'files',     'header': ['# MRU']            },
    \ { 'type': 'dir',       'header': ['# MRU '. getcwd()] },
    \ { 'type': 'sessions',  'header': ['# Sessions']       },
    \ { 'type': 'bookmarks', 'header': ['# Bookmarks']      },
    \ { 'type': function('s:gitModified'),  'header': ['# git modified']},
    \ { 'type': function('s:gitUntracked'), 'header': ['# git untracked']},
    \ { 'type': 'commands',  'header': ['# Commands']       },
\ ]
'''
