[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'sainnhe/sonokai'
hook_add = '''
let g:sonokai_style = 'default'
let g:sonokai_disable_italic_comment = 1
let g:sonokai_better_performance = 1

au MyAutoCmd VimEnter * nested colorscheme sonokai
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'numToStr/Comment.nvim'
hook_add = '''
lua << EOF
require('Comment').setup()
EOF
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
imap <C-j> <plug>(neosnippet_expand_or_jump)
smap <C-j> <plug>(neosnippet_expand_or_jump)
xmap <C-j> <Plug>(neosnippet_expand_target)

imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

let g:neosnippet#snippets_directory= '~/.vim/snippets'

if has('conceal')
    set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add='''
nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>

let g:ale_disable_lsp = 1

let g:ale_sign_error = "\uf05e"
let g:ale_sign_warning = "\uf071"
let g:ale_sign_column_always = 1

let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_linters = {
\   'go': ['golint', 'govet', 'golangci-lint'],
\   'css': ['stylelint'],
\   'scss': ['stylelint'],
\   'json': ['jq'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint'],
\   'vue': ['eslint', 'stylelint']
\ }

let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   'dart': ['dart-format'],
\   'go': ['goimports'],
\   'css': ['stylelint'],
\   'scss': ['stylelint'],
\   'json': ['jq'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint'],
\   'vue': ['eslint', 'stylelint']
\}

let g:ale_dart_format_options = '--line-length 140'
let g:ale_go_golangci_lint_options = ''
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add='''
let g:loaded_matchparen = 1
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
hook_add = '''
map <S-r> <Plug>(operator-replace)
'''

[[plugins]]
repo = 'goolord/alpha-nvim'
depends = 'nvim-web-devicons'
hook_add = '''
lua require'alpha'.setup(require'alpha.themes.startify'.config)
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = ['plenary.nvim']
hook_add = '''
nnoremap ,p  <cmd>Telescope find_files find_command=rg,--no-ignore-dot,--hidden,-g,!.git/,--files<cr>
nnoremap ,ff <cmd>Telescope find_files find_command=rg,--no-ignore-dot,--hidden,-g,!.git/,--files<cr>
nnoremap ,fo <cmd>Telescope oldfiles<cr>
nnoremap ,fg <cmd>Telescope live_grep<cr>
nnoremap ,fG <cmd>Telescope grep_string<cr>
nnoremap ,fb <cmd>Telescope buffers<cr>
nnoremap ,fh <cmd>Telescope help_tags<cr>

nnoremap ,<C-g><C-s> <cmd>Telescope git_status<cr>

lua <<EOL
local actions = require("telescope.actions")
require("telescope").setup{
  defaults = {
    vimgrep_arguments = {
      "rg",
      "--no-ignore-dot",
      "--hidden",
      "-g=!.git/",
      "--color=never",
      "--no-heading",
      "--with-filename",
      "--line-number",
      "--column",
      "--smart-case"
    },
    mappings = {
      i = {
        ["<esc>"] = actions.close,
      },
      n = {
        ["<C-c>"] = actions.close,
        ["q"] = actions.close,
      },
    },
  },
}
EOL
'''

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
depends = 'nvim-web-devicons'
hook_add = '''
lua << EOF
require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'auto',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {},
    always_divide_middle = true,
    globalstatus = false,
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {
      'branch',
      'diff',
      {
        'diagnostics',
        sources = { 'nvim_diagnostic', 'ale' },
      },
    },
    lualine_c = {'filename'},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  extensions = {}
}
EOF
'''

[[plugins]]
repo = 'folke/which-key.nvim'
hook_add = '''
lua << EOF
require("which-key").setup {}
EOF
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
hook_add = '''
lua << EOF
require('gitsigns').setup{
  signcolumn = true,
  numhl      = true,
  linehl     = false,
  word_diff  = true,
  on_attach = function(bufnr)
    local function map(mode, lhs, rhs, opts)
        opts = vim.tbl_extend('force', {noremap = true, silent = true}, opts or {})
        vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts)
    end

    -- Navigation
    map('n', ']c', "&diff ? ']c' : '<cmd>Gitsigns next_hunk<CR>'", {expr=true})
    map('n', '[c', "&diff ? '[c' : '<cmd>Gitsigns prev_hunk<CR>'", {expr=true})

    -- Actions
    map('n', '<leader>ga', ':Gitsigns stage_hunk<CR>')
    map('v', '<leader>ga', ':Gitsigns stage_hunk<CR>')
    map('n', '<leader>gu', '<cmd>Gitsigns undo_stage_hunk<CR>')
    map('n', '<leader>gd', '<cmd>Gitsigns diffthis<CR>')
    map('n', '<leader>gtd', '<cmd>Gitsigns toggle_deleted<CR>')
  end
}
EOF
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
hook_add = '''
lua require('colorizer').setup()
'''

[[plugins]]
repo = 'kevinhwang91/nvim-hlslens'
hook_add = '''
lua << EOF
local kopts = {noremap = true, silent = true}

vim.api.nvim_set_keymap('n', 'n',
    [[<Cmd>execute('normal! ' . v:count1 . 'n')<CR><Cmd>lua require('hlslens').start()<CR>]],
    kopts)
vim.api.nvim_set_keymap('n', 'N',
    [[<Cmd>execute('normal! ' . v:count1 . 'N')<CR><Cmd>lua require('hlslens').start()<CR>]],
    kopts)
vim.api.nvim_set_keymap('n', '*', [[*<Cmd>lua require('hlslens').start()<CR>]], kopts)
vim.api.nvim_set_keymap('n', '#', [[#<Cmd>lua require('hlslens').start()<CR>]], kopts)
vim.api.nvim_set_keymap('n', 'g*', [[g*<Cmd>lua require('hlslens').start()<CR>]], kopts)
vim.api.nvim_set_keymap('n', 'g#', [[g#<Cmd>lua require('hlslens').start()<CR>]], kopts)
EOF
'''

[[plugins]]
repo = 'petertriho/nvim-scrollbar'
depends = 'nvim-hlslens'
hook_add = '''
lua << EOF
require("scrollbar.handlers.search").setup()
require("scrollbar").setup({
	show = true,
	set_highlights = true,
	handle = {
		color = "#777777",
	},
	marks = {
		Search = { color = "#ff9e64" },
		Error = { color = "#db4b4b" },
		Warn = { color = "#e0af68" },
		Info = { color = "#0db9d7" },
		Hint = { color = "#1abc9c" },
		Misc = { color = "#9d7cd8" },
	},
	handlers = {
		diagnostic = true,
		search = true,
	},
})
EOF
'''

[[plugins]]
repo = 'wakatime/vim-wakatime'
