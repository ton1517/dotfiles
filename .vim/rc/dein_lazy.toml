[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_add = 'source ~/.vim/rc/plugins/unite.rc.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = [['n', '<Plug>']]
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyz'
let g:EasyMotion_smartcase = 1

nmap <Leader>e <Plug>(easymotion-overwin-w)
nmap <Leader>s <Plug>(easymotion-overwin-f2)
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = ['Switch']
hook_add = 'nnoremap - :Switch<cr>'

[[plugins]]
repo = 't9md/vim-textmanip'
on_map = [['nxo', '<Plug>']]
hook_add = '''
xmap <S-j> <Plug>(textmanip-move-down)
xmap <S-k> <Plug>(textmanip-move-up)
xmap <S-h> <Plug>(textmanip-move-left)
xmap <S-l> <Plug>(textmanip-move-right)

map <Space>d <Plug>(textmanip-duplicate-down)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>D <Plug>(textmanip-duplicate-up)
nmap <Space>D <Plug>(textmanip-duplicate-up)
'''

[[plugins]]
repo = 'vim-scripts/Align'
on_cmd = ['Align']
hook_add = '''
vnoremap <silent> a> :Align =><CR>
vnoremap <silent> a= :Align =<CR>
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
on_map = [['ox', 'i^', 'a^']]
hook_post_source = '''
" htmlタグとタグの間のテキストをオブジェクト化する
call textobj#user#plugin('html', {
\   'text': {
\     'pattern': ['>', '<'],
\     'select-a': 'a^',
\     'select-i': 'i^',
\   },
\ })
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['ox', 'ii', 'ai', 'iI', 'aI']]

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = [['ox', 'il', 'al']]

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
on_map = [['ox', 'i,', 'a,']]

[[plugins]]
repo =  'haya14busa/incsearch.vim'
on_map = ['<Plug>']
hook_add = '''
map /  <Plug>(incsearch-forward)
'''

[[plugins]]
repo = 'stevearc/aerial.nvim'
on_cmd = 'AerialOpen'
hook_add = '''
nnoremap <silent> ,tb :AerialOpen<CR>
'''
hook_source = '''
lua require('aerial').setup({})
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_cmd = ['SplitjoinJoin', 'SplitjoinSplit']
hook_add = '''
nmap ,j :SplitjoinJoin<cr>
nmap ,s :SplitjoinSplit<cr>
'''

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = ['GundoToggle']
hook_add = '''
nnoremap <silent> ,gu :GundoToggle<CR>
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_if = 'has("nvim")'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    "markdown",
    "go",
    "c",
    "dockerfile",
    "rust",
    "python",
    "json",
    "json5",
    "ruby",
    "lua",
    "php",
    "java",
    "kotlin",
    "make",
    "cmake",
    "vim",
    "css",
    "scss",
    "html",
    "toml",
    "vue",
    "cpp",
    "jsonc",
    "javascript",
    "yaml",
    "swift",
    "c_sharp",
    "tsx",
    "typescript",
    "dart",
    "bash",
  },
  highlight = {
    enable = true,
  },
  indent = {
    enable = true,
  },
  textobjects = {
    swap = {
      enable = true,
      swap_next = {
        ["<leader>l"] = "@parameter.inner",
        ["<leader>j"] = "@function.outer",
      },
      swap_previous = {
        ["<leader>h"] = "@parameter.inner",
        ["<leader>k"] = "@function.outer",
      },
    },
  },
  rainbow = {
    enable = true,
    extended_mode = true,
    max_file_lines = nil,
  },
}
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_event = 'BufRead'
depends = 'nvim-treesitter'

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
on_event = 'BufRead'
depends = 'nvim-treesitter'

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
nnoremap <silent> <Leader>f :<C-u>Defx<CR>
'''
hook_source = '''
call defx#custom#column('mark', {
\ 'readonly_icon': '',
\ 'selected_icon': '',
\ })


call defx#custom#option('_', {
\ 'winwidth': 35,
\ 'split': 'vertical',
\ 'direction': 'topleft',
\ 'show_ignored_files': 1,
\ 'buffer_name': 'exproler',
\ 'toggle': 0,
\ 'resume': 1,
\ 'vertical_preview': 1,
\ 'floating_preview': 1,
\ 'preview_width': float2nr(&columns / 2.3),
\ 'preview_height': 30,
\ 'columns': 'indent:mark:git:icons:filename',
\ })

'''
[plugins.ftplugin]
defx = '''
setlocal cursorline

nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
nnoremap <silent><buffer><expr> e defx#do_action('drop')
nnoremap <silent><buffer><expr> E defx#do_action('drop', 'vsplit')
nnoremap <silent><buffer><expr> P defx#do_action('preview')

nnoremap <silent><buffer><expr> h defx#do_action('close_tree')
nnoremap <silent><buffer><expr> l defx#do_action('open_tree')
nnoremap <silent><buffer><expr> o defx#do_action('open_tree', 'toggle')
nnoremap <silent><buffer><expr> <BS> defx#do_action('cd', ['..'])

nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'

nnoremap <silent><buffer><expr> y defx#do_action('yank_path')
nnoremap <silent><buffer><expr> c defx#do_action('copy')
nnoremap <silent><buffer><expr> m defx#do_action('move')
nnoremap <silent><buffer><expr> p defx#do_action('paste')
nnoremap <silent><buffer><expr> r defx#do_action('rename')
nnoremap <silent><buffer><expr> d defx#do_action('remove_trash') " need `pip install Send2Trash`

nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N defx#do_action('new_file')
nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')

nnoremap <silent><buffer><expr> > defx#do_action('resize', defx#get_context().winwidth + 5)
nnoremap <silent><buffer><expr> < defx#do_action('resize', defx#get_context().winwidth - 5)

nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> <Tab> defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')

nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
nnoremap <silent><buffer><expr> q defx#do_action('quit')
nnoremap <silent><buffer><expr> <C-r> defx#do_action('redraw')
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'hotwatermorning/auto-git-diff'
on_ft = ['gitrebase']
hook_add = '''
function! s:setup_auto_git_diff() abort
    nmap <buffer><C-l> <Plug>(auto_git_diff_scroll_manual_update)
    nmap <buffer><C-n> <Plug>(auto_git_diff_scroll_down_half)
    nmap <buffer><C-p> <Plug>(auto_git_diff_scroll_up_half)
endfunction
autocmd FileType gitrebase call <SID>setup_auto_git_diff()
'''

[[plugins]]
repo = 'rhysd/committia.vim'
on_ft = ['gitcommit']

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
hook_source = '''
lua vim.notify = require('notify')
'''

[[plugins]]
repo = 's1n7ax/nvim-comment-frame'
depends = 'nvim-treesitter'
on_lua = 'nvim-comment-frame'
hook_add = '''
nmap <leader>cf :lua require('nvim-comment-frame').add_comment()<CR>
nmap <leader>Cf :lua require('nvim-comment-frame').add_multiline_comment()<CR>
'''
hook_source = '''
lua << EOF
require('nvim-comment-frame').setup({
    disable_default_keymap = true,
})
EOF
'''

[[plugins]]
repo = 'gbprod/yanky.nvim'
depends = 'telescope.nvim'
on_event = 'VimEnter'
hook_add = '''
nnoremap p <Plug>(YankyPutAfter)
xnoremap p <Plug>(YankyPutAfter)
nnoremap P <Plug>(YankyPutBefore)
xnoremap P <Plug>(YankyPutBefore)
nnoremap gp <Plug>(YankyGPutAfter)
xnoremap gp <Plug>(YankyGPutAfter)
nnoremap gP <Plug>(YankyGPutBefore)
xnoremap gP <Plug>(YankyGPutBefore)
nnoremap <C-n> <Plug>(YankyCycleForward)
nnoremap <C-p> <Plug>(YankyCycleBackward)

nnoremap ,fy <cmd>Telescope yank_history<cr>
'''
hook_source = '''
lua << EOF
local mapping = require("yanky.telescope.mapping")
require("yanky").setup({
  ring = {
    history_length = 100,
    storage = "shada",
    sync_with_numbered_registers = true,
  },
  system_clipboard = {
    sync_with_ring = true,
  },
  highlight = {
    on_put = true,
    on_yank = true,
    timer = 100,
  },
  preserve_cursor_position = {
    enabled = true,
  },
  picker = {
    telescope = {
      mappings = {
        default = mapping.put("p"),
        i = {
          ["<c-p>"] = mapping.put("p"),
          ["<c-k>"] = mapping.put("P"),
        },
        n = {
          ["p"] = mapping.put("p"),
          ["P"] = mapping.put("P"),
        },
      },
    },
  },
})
require("telescope").load_extension("yank_history")
EOF
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = ['<Plug>(quickrun)']
hook_add = '''
nmap <silent> <Leader>r <Plug>(quickrun)

let g:quickrun_config = {
\   "markdown" : {
\       'outputter/buffer/close_on_empty' : 1,
\       'command' : 'open',
\       'cmdopt'  : '-a',
\       'args'    : 'Marked',
\       'exec'    : '%c %o %a %s',
\   },
\   "typescript" : {
\       'command' : 'deno',
\       'cmdopt' : 'run',
\   },
\}
'''

[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = 'InsertEnter'
hook_source = '''
lua require('nvim-autopairs').setup{}
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = '<Plug>(expand_region'
hook_add='''
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'mfussenegger/nvim-ts-hint-textobject'
depends = 'nvim-treesitter'
on_lua = 'tsht'
hook_add = '''
omap     <silent> m :<C-U>lua require('tsht').nodes()<CR>
vnoremap <silent> m :lua require('tsht').nodes()<CR>
'''

[[plugins]]
repo = 'David-Kunz/treesitter-unit'
depends = 'nvim-treesitter'
on_lua = 'treesitter-unit'
hook_add = '''
xnoremap iu :lua require"treesitter-unit".select()<CR>
xnoremap au :lua require"treesitter-unit".select(true)<CR>
onoremap iu :<c-u>lua require"treesitter-unit".select()<CR>
onoremap au :<c-u>lua require"treesitter-unit".select(true)<CR>
'''
