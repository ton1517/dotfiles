[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = [['n', '<Plug>']]
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyz'
let g:EasyMotion_smartcase = 1

nmap <Leader>e <Plug>(easymotion-overwin-w)
nmap <Leader>s <Plug>(easymotion-overwin-f2)
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = ['Switch']
hook_add = 'nnoremap - :Switch<cr>'

[[plugins]]
repo = 't9md/vim-textmanip'
on_map = [['nxo', '<Plug>']]
hook_add = '''
xmap <S-j> <Plug>(textmanip-move-down)
xmap <S-k> <Plug>(textmanip-move-up)
xmap <S-h> <Plug>(textmanip-move-left)
xmap <S-l> <Plug>(textmanip-move-right)

map <Space>d <Plug>(textmanip-duplicate-down)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>D <Plug>(textmanip-duplicate-up)
nmap <Space>D <Plug>(textmanip-duplicate-up)
'''

[[plugins]]
repo = 'vim-scripts/Align'
on_cmd = ['Align']
hook_add = '''
vnoremap <silent> a> :Align =><CR>
vnoremap <silent> a= :Align =<CR>
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
on_map = [['ox', 'i^', 'a^']]
hook_post_source = '''
" htmlタグとタグの間のテキストをオブジェクト化する
call textobj#user#plugin('html', {
\   'text': {
\     'pattern': ['>', '<'],
\     'select-a': 'a^',
\     'select-i': 'i^',
\   },
\ })
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['ox', 'ii', 'ai', 'iI', 'aI']]

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = [['ox', 'il', 'al']]

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
on_map = [['ox', 'i,', 'a,']]

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = ['<Plug>']
hook_add = '''
map /  <Plug>(incsearch-forward)
'''

[[plugins]]
repo = 'stevearc/aerial.nvim'
on_cmd = 'AerialOpen'
hook_add = '''
nnoremap <silent> ,tb :AerialOpen<CR>
'''
hook_source = '''
lua require('aerial').setup({})
'''

[[plugins]]
repo = 'AckslD/nvim-trevJ.lua'
depends = 'nvim-treesitter'
on_lua = 'trevj'
hook_add = '''
nmap ,j :lua require('trevj').format_at_cursor()<CR>
'''
hook_source = '''
lua require("trevj").setup()
'''

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = ['GundoToggle']
hook_add = '''
nnoremap <silent> ,gu :GundoToggle<CR>
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = 'BufRead'
hook_source = '''
lua << EOF
require("indent_blankline").setup {
    show_current_context = true,
    show_current_context_start = true,
}
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    "markdown",
    "go",
    "c",
    "dockerfile",
    "rust",
    "python",
    "json",
    "json5",
    "ruby",
    "lua",
    "php",
    "java",
    "kotlin",
    "make",
    "cmake",
    "vim",
    "css",
    "scss",
    "html",
    "toml",
    "vue",
    "cpp",
    "jsonc",
    "javascript",
    "yaml",
    "swift",
    "c_sharp",
    "tsx",
    "typescript",
    "dart",
    "bash",
  },
  highlight = {
    enable = true,
  },
  indent = {
    enable = true,
  },
  textobjects = {
    swap = {
      enable = true,
      swap_next = {
        ["<leader>l"] = "@parameter.inner",
        ["<leader>j"] = "@function.outer",
      },
      swap_previous = {
        ["<leader>h"] = "@parameter.inner",
        ["<leader>k"] = "@function.outer",
      },
    },
  },
  rainbow = {
    enable = true,
    extended_mode = true,
    max_file_lines = nil,
  },
}
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_event = 'BufRead'
depends = 'nvim-treesitter'

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
on_event = 'BufRead'
depends = 'nvim-treesitter'

[[plugins]]
repo = 'hotwatermorning/auto-git-diff'
on_ft = ['gitrebase']
hook_add = '''
function! s:setup_auto_git_diff() abort
    nmap <buffer><C-l> <Plug>(auto_git_diff_scroll_manual_update)
    nmap <buffer><C-n> <Plug>(auto_git_diff_scroll_down_half)
    nmap <buffer><C-p> <Plug>(auto_git_diff_scroll_up_half)
endfunction
autocmd FileType gitrebase call <SID>setup_auto_git_diff()
'''

[[plugins]]
repo = 'rhysd/committia.vim'
on_ft = ['gitcommit']

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
hook_source = '''
lua vim.notify = require('notify')
'''

[[plugins]]
repo = 's1n7ax/nvim-comment-frame'
depends = 'nvim-treesitter'
on_lua = 'nvim-comment-frame'
hook_add = '''
nmap <leader>cf :lua require('nvim-comment-frame').add_comment()<CR>
nmap <leader>Cf :lua require('nvim-comment-frame').add_multiline_comment()<CR>
'''
hook_source = '''
lua << EOF
require('nvim-comment-frame').setup({
    disable_default_keymap = true,
})
EOF
'''

[[plugins]]
repo = 'gbprod/yanky.nvim'
depends = 'telescope.nvim'
on_event = 'VimEnter'
hook_add = '''
nnoremap p <Plug>(YankyPutAfter)
xnoremap p <Plug>(YankyPutAfter)
nnoremap P <Plug>(YankyPutBefore)
xnoremap P <Plug>(YankyPutBefore)
nnoremap gp <Plug>(YankyGPutAfter)
xnoremap gp <Plug>(YankyGPutAfter)
nnoremap gP <Plug>(YankyGPutBefore)
xnoremap gP <Plug>(YankyGPutBefore)
nnoremap <C-n> <Plug>(YankyCycleForward)
nnoremap <C-p> <Plug>(YankyCycleBackward)

nnoremap ,fy <cmd>Telescope yank_history<cr>
'''
hook_source = '''
lua << EOF
local mapping = require("yanky.telescope.mapping")
require("yanky").setup({
  ring = {
    history_length = 100,
    storage = "shada",
    sync_with_numbered_registers = true,
  },
  system_clipboard = {
    sync_with_ring = true,
  },
  highlight = {
    on_put = true,
    on_yank = true,
    timer = 100,
  },
  preserve_cursor_position = {
    enabled = true,
  },
  picker = {
    telescope = {
      mappings = {
        default = mapping.put("p"),
        i = {
          ["<c-p>"] = mapping.put("p"),
          ["<c-k>"] = mapping.put("P"),
        },
        n = {
          ["p"] = mapping.put("p"),
          ["P"] = mapping.put("P"),
        },
      },
    },
  },
})
require("telescope").load_extension("yank_history")
EOF
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = ['<Plug>(quickrun)']
hook_add = '''
nmap <silent> <Leader>r <Plug>(quickrun)

let g:quickrun_config = {
\   "markdown" : {
\       'outputter/buffer/close_on_empty' : 1,
\       'command' : 'open',
\       'cmdopt'  : '-a',
\       'args'    : 'Marked',
\       'exec'    : '%c %o %a %s',
\   },
\   "typescript" : {
\       'command' : 'deno',
\       'cmdopt' : 'run',
\   },
\}
'''

[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = 'InsertEnter'
hook_source = '''
lua require('nvim-autopairs').setup{}
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = '<Plug>(expand_region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'mfussenegger/nvim-ts-hint-textobject'
depends = 'nvim-treesitter'
on_lua = 'tsht'
hook_add = '''
omap     <silent> m :<C-U>lua require('tsht').nodes()<CR>
vnoremap <silent> m :lua require('tsht').nodes()<CR>
'''

[[plugins]]
repo = 'David-Kunz/treesitter-unit'
depends = 'nvim-treesitter'
on_lua = 'treesitter-unit'
hook_add = '''
xnoremap iu :lua require"treesitter-unit".select()<CR>
xnoremap au :lua require"treesitter-unit".select(true)<CR>
onoremap iu :<c-u>lua require"treesitter-unit".select()<CR>
onoremap au :<c-u>lua require"treesitter-unit".select(true)<CR>
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'nvim-neo-tree/neo-tree.nvim'
depends = ['plenary.nvim', 'nvim-web-devicons', 'nui.nvim']
on_cmd = 'Neotree'
hook_add = '''
nnoremap <silent> <Leader>f :Neotree<CR>
'''
hook_source = '''
lua << EOF
require("neo-tree").setup({
  close_if_last_window = true,
  enable_git_status = true,
  enable_diagnostics = true,
  default_component_configs = {
    git_status = {
      symbols = {
        deleted   = "✖",
        renamed   = "",
        untracked = "?",
        ignored   = "/",
        unstaged  = "*",
        staged    = "o",
        conflict  = "",
      }
    },
  },
  window = {
    position = "left",
    width = 35,
    mapping_options = {
      noremap = true,
      nowait = true,
    },
    mappings = {
      ["<space>"] = {
          "toggle_node",
          nowait = true,
      },
      ["<2-LeftMouse>"] = "open",
      ["<cr>"] = "open",
      ["S"] = "none",
      ["s"] = "none",
      ["t"] = "open_tabnew",
      ["C"] = "close_node",
      ["h"] = "close_node",
      ["l"] = "open",
      ["e"] = "open",
      ["a"] = {
        "add",
        config = {
          show_path = "none" -- "none", "relative", "absolute"
        }
      },
      ["A"] = "add_directory",
      ["d"] = "delete",
      ["r"] = "rename",
      ["y"] = "copy_to_clipboard",
      ["x"] = "cut_to_clipboard",
      ["p"] = "paste_from_clipboard",
      ["c"] = "copy",
      ["m"] = "move",
      ["q"] = "close_window",
      ["R"] = "refresh",
      ["?"] = "show_help",
    }
  },
  nesting_rules = {},
  filesystem = {
    filtered_items = {
      visible = true,
      hide_dotfiles = false,
      hide_gitignored = false,
      hide_hidden = false,
      never_show = {
        ".DS_Store",
        "thumbs.db",
        ".git",
      },
    },
    follow_current_file = true,
    hijack_netrw_behavior = "open_default",
    use_libuv_file_watcher = true,
  }
})
EOF
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
depends = 'nvim-hlslens'
on_map = '<Plug>'
hook_add = '''
let g:asterisk#keeppos = 1

map *  <Plug>(asterisk-z*)<Cmd>lua require('hlslens').start()<CR>
map #  <Plug>(asterisk-z#)<Cmd>lua require('hlslens').start()<CR>
map g* <Plug>(asterisk-gz*)<Cmd>lua require('hlslens').start()<CR>
map g# <Plug>(asterisk-gz#)<Cmd>lua require('hlslens').start()<CR>
'''

[[plugins]]
repo = 'folke/trouble.nvim'
on_cmd = 'TroubleToggle'
hook_add = '''
nnoremap <leader>xx <cmd>TroubleToggle<cr>
nnoremap <leader>xw <cmd>TroubleToggle workspace_diagnostics<cr>
nnoremap <leader>xd <cmd>TroubleToggle document_diagnostics<cr>
nnoremap <leader>xq <cmd>TroubleToggle quickfix<cr>
nnoremap <leader>xl <cmd>TroubleToggle loclist<cr>
nnoremap gR <cmd>TroubleToggle lsp_references<cr>
'''

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
on_ft = 'qf'
hook_source = '''
lua << EOF
require("bqf").setup{
  func_map = {
    pscrollup = "<C-u>",
    pscrolldown = "<C-d>",
  }
}
EOF
'''

[[plugins]]
repo = 'lewis6991/nvim-treesitter-context'
on_event = 'BufRead'
depends = 'nvim-treesitter'
hook_source = '''
lua << EOF
require'treesitter-context'.setup{
  enable = true,
  throttle = true,
  max_lines = 0,
  patterns = {
    default = { 'class', 'function', 'method' },
  },
}
EOF
'''
