[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_add = 'source ~/.vim/rc/plugins/unite.rc.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = [['n', '<Plug>']]
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyz'
let g:EasyMotion_smartcase = 1

nmap <Leader>e <Plug>(easymotion-overwin-w)
nmap <Leader>s <Plug>(easymotion-overwin-f2)
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = ['Switch']
hook_add = 'nnoremap - :Switch<cr>'

[[plugins]]
repo = 't9md/vim-textmanip'
on_map = [['nxo', '<Plug>']]
hook_add = '''
xmap <S-j> <Plug>(textmanip-move-down)
xmap <S-k> <Plug>(textmanip-move-up)
xmap <S-h> <Plug>(textmanip-move-left)
xmap <S-l> <Plug>(textmanip-move-right)

map <Space>d <Plug>(textmanip-duplicate-down)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>D <Plug>(textmanip-duplicate-up)
nmap <Space>D <Plug>(textmanip-duplicate-up)
'''

[[plugins]]
repo = 'vim-scripts/Align'
on_cmd = ['Align']
hook_add = '''
vnoremap <silent> a> :Align =><CR>
vnoremap <silent> a= :Align =<CR>
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
on_map = [['ox', 'i^', 'a^']]
hook_post_source = '''
" htmlタグとタグの間のテキストをオブジェクト化する
call textobj#user#plugin('html', {
\   'text': {
\     'pattern': ['>', '<'],
\     'select-a': 'a^',
\     'select-i': 'i^',
\   },
\ })
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['ox', 'ii', 'ai', 'iI', 'aI']]

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = [['ox', 'il', 'al']]

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
on_map = [['ox', 'i,', 'a,']]

[[plugins]]
repo =  'haya14busa/incsearch.vim'
on_map = ['<Plug>']
hook_add = '''
map /  <Plug>(incsearch-forward)
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
depends = 'ctrlp-py-matcher'
on_cmd = ['CtrlP']
hook_add = '''
nnoremap <silent> ,p :<C-u>CtrlP<CR>
let g:ctrlp_map = '<Nop>'

let g:ctrlp_max_files = 0
let g:ctrlp_lazy_update = 10
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden --ignore .git --ignore .svn --ignore .hg --ignore .DS_Store --ignore "**/*.pyc" -g ""'
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
'''

[[plugins]]
repo = 'FelikZ/ctrlp-py-matcher'
on_source = 'ctrlp.vim'

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TagbarToggle']
hook_add = '''
nnoremap <silent> ,tb :TagbarToggle<CR>
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_ft = ['go', 'php', 'python', 'javascript', 'html', 'css', 'sass', 'scss']
hook_source = '''
nmap ,j :SplitjoinJoin<cr>
nmap ,s :SplitjoinSplit<cr>
'''

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = ['GundoToggle']
hook_add = '''
nnoremap <silent> ,gu :GundoToggle<CR>
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_if = 'has("nvim")'

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
nnoremap <silent> <Leader>f :<C-u>Defx<CR>
'''
hook_source = '''
call defx#custom#column('mark', {
\ 'readonly_icon': '',
\ 'selected_icon': '',
\ })


call defx#custom#option('_', {
\ 'winwidth': 35,
\ 'split': 'vertical',
\ 'direction': 'topleft',
\ 'show_ignored_files': 1,
\ 'buffer_name': 'exproler',
\ 'toggle': 0,
\ 'resume': 1,
\ 'vertical_preview': 1,
\ 'floating_preview': 1,
\ 'preview_width': float2nr(&columns / 2.3),
\ 'preview_height': 30,
\ 'columns': 'indent:mark:git:icons:filename',
\ })

'''
[plugins.ftplugin]
defx = '''
au WinEnter * call defx#redraw()
au FocusGained * call defx#redraw()
au BufWritePost * call defx#redraw()
au BufEnter * call defx#redraw()

setlocal cursorline

nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
nnoremap <silent><buffer><expr> e defx#do_action('drop')
nnoremap <silent><buffer><expr> E defx#do_action('drop', 'vsplit')
nnoremap <silent><buffer><expr> P defx#do_action('preview')

nnoremap <silent><buffer><expr> h defx#do_action('close_tree')
nnoremap <silent><buffer><expr> l defx#do_action('open_tree')
nnoremap <silent><buffer><expr> o defx#do_action('open_tree', 'toggle')
nnoremap <silent><buffer><expr> <BS> defx#do_action('cd', ['..'])

nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'

nnoremap <silent><buffer><expr> y defx#do_action('yank_path')
nnoremap <silent><buffer><expr> c defx#do_action('copy')
nnoremap <silent><buffer><expr> m defx#do_action('move')
nnoremap <silent><buffer><expr> p defx#do_action('paste')
nnoremap <silent><buffer><expr> r defx#do_action('rename')
nnoremap <silent><buffer><expr> d defx#do_action('remove_trash') " need `pip install Send2Trash`

nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N defx#do_action('new_file')
nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')

nnoremap <silent><buffer><expr> > defx#do_action('resize', defx#get_context().winwidth + 5)
nnoremap <silent><buffer><expr> < defx#do_action('resize', defx#get_context().winwidth - 5)

nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> <Tab> defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')

nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
nnoremap <silent><buffer><expr> q defx#do_action('quit')
nnoremap <silent><buffer><expr> <C-r> defx#do_action('redraw')
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'kristijanhusak/defx-git'
