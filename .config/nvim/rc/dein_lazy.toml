[[plugins]]
repo = 'phaazon/hop.nvim'
on_cmd = ['HopWord', 'HopChar2']
hook_add = '''
nmap <Leader>e :HopWord<cr>
nmap <Leader>s :HopChar2<cr>
'''
hook_source = '''
lua require('hop').setup({ keys = 'etovxqpdygfblzhckisuran' })
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = ['Switch']
hook_add = 'nnoremap - :Switch<cr>'

[[plugins]]
repo = 't9md/vim-textmanip'
on_map = [['nxo', '<Plug>']]
hook_add = '''
xmap <S-j> <Plug>(textmanip-move-down)
xmap <S-k> <Plug>(textmanip-move-up)
xmap <S-h> <Plug>(textmanip-move-left)
xmap <S-l> <Plug>(textmanip-move-right)

map <Space>d <Plug>(textmanip-duplicate-down)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>D <Plug>(textmanip-duplicate-up)
nmap <Space>D <Plug>(textmanip-duplicate-up)
'''

[[plugins]]
repo = 'vim-scripts/Align'
on_cmd = ['Align']
hook_add = '''
vnoremap <silent> a> :Align =><CR>
vnoremap <silent> a= :Align =<CR>
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
on_map = [['ox', 'i^', 'a^']]
hook_post_source = '''
" htmlタグとタグの間のテキストをオブジェクト化する
call textobj#user#plugin('html', {
\   'text': {
\     'pattern': ['>', '<'],
\     'select-a': 'a^',
\     'select-i': 'i^',
\   },
\ })
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['ox', 'ii', 'ai', 'iI', 'aI']]

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = [['ox', 'il', 'al']]

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
on_map = [['ox', 'i,', 'a,']]

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-replace)'
hook_add = '''
map <S-r> <Plug>(operator-replace)
'''

[[plugins]]
repo = 'mopp/vim-operator-convert-case'
depends = ['vim-operator-user', 'vim-repeat']
on_map = '<Plug>(operator-convert-case-'
hook_add = '''
nnoremap ,clc <Plug>(operator-convert-case-lower-camel)iw
nnoremap ,cuc <Plug>(operator-convert-case-upper-camel)iw
nnoremap ,cls <Plug>(operator-convert-case-lower-snake)iw
nnoremap ,cus <Plug>(operator-convert-case-upper-snake)iw
vnoremap ,clc <Plug>(operator-convert-case-lower-camel)gv
vnoremap ,cuc <Plug>(operator-convert-case-upper-camel)gv
vnoremap ,cls <Plug>(operator-convert-case-lower-snake)gv
vnoremap ,cus <Plug>(operator-convert-case-upper-snake)gv
'''

[[plugins]]
repo = 'stevearc/aerial.nvim'
on_cmd = 'AerialOpen'
hook_add = '''
nnoremap <silent> ,tb :AerialOpen<CR>
'''
hook_source = '''
lua require('aerial').setup({})
'''

[[plugins]]
repo = 'AckslD/nvim-trevJ.lua'
depends = 'nvim-treesitter'
on_lua = 'trevj'
hook_add = '''
nmap ,j :lua require('trevj').format_at_cursor()<CR>
'''
hook_source = '''
lua require("trevj").setup()
'''

[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_cmd = ['MundoToggle']
hook_add = '''
nnoremap ,mu :MundoToggle<CR>
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = 'BufRead'
hook_source = '''
lua require('rc/plugin-config/indent-blankline')
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua require('rc/plugin-config/nvim-treesitter')
'''

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
on_event = 'BufRead'
depends = 'nvim-treesitter'

[[plugins]]
repo = 'hotwatermorning/auto-git-diff'
on_event = 'BufRead'
on_ft = ['gitrebase']
hook_add = '''
function! s:setup_auto_git_diff() abort
    nmap <buffer><C-l> <Plug>(auto_git_diff_scroll_manual_update)
    nmap <buffer><C-n> <Plug>(auto_git_diff_scroll_down_half)
    nmap <buffer><C-p> <Plug>(auto_git_diff_scroll_up_half)
endfunction
autocmd FileType gitrebase call <SID>setup_auto_git_diff()
'''

[[plugins]]
repo = 'rhysd/committia.vim'
on_event = 'BufRead'
on_ft = ['gitcommit']

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
hook_source = '''
lua vim.notify = require('notify')
'''

[[plugins]]
repo = 's1n7ax/nvim-comment-frame'
depends = 'nvim-treesitter'
on_lua = 'nvim-comment-frame'
hook_add = '''
nmap <leader>cf :lua require('nvim-comment-frame').add_comment()<CR>
nmap <leader>Cf :lua require('nvim-comment-frame').add_multiline_comment()<CR>
'''
hook_source = '''
lua << EOF
require('nvim-comment-frame').setup({
    disable_default_keymap = true,
})
EOF
'''

[[plugins]]
repo = 'gbprod/yanky.nvim'
depends = 'telescope.nvim'
on_event = 'VimEnter'
hook_add = '''
nnoremap p <Plug>(YankyPutAfter)
xnoremap p <Plug>(YankyPutAfter)
nnoremap P <Plug>(YankyPutBefore)
xnoremap P <Plug>(YankyPutBefore)
nnoremap gp <Plug>(YankyGPutAfter)
xnoremap gp <Plug>(YankyGPutAfter)
nnoremap gP <Plug>(YankyGPutBefore)
xnoremap gP <Plug>(YankyGPutBefore)
nnoremap <C-n> <Plug>(YankyCycleForward)
nnoremap <C-p> <Plug>(YankyCycleBackward)

nnoremap ,fy <cmd>Telescope yank_history<cr>
'''
hook_source = '''
lua require('rc/plugin-config/yanky')
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = ['<Plug>(quickrun)']
hook_add = '''
nmap <silent> <Leader>r <Plug>(quickrun)

let g:quickrun_config = {
\   "markdown" : {
\       'outputter/buffer/close_on_empty' : 1,
\       'command' : 'open',
\       'cmdopt'  : '-a',
\       'args'    : 'Marked',
\       'exec'    : '%c %o %a %s',
\   },
\   "typescript" : {
\       'command' : 'deno',
\       'cmdopt' : 'run',
\   },
\}
'''

[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = 'InsertEnter'
hook_source = '''
lua require('nvim-autopairs').setup{}
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = '<Plug>(expand_region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'mfussenegger/nvim-ts-hint-textobject'
depends = 'nvim-treesitter'
on_lua = 'tsht'
hook_add = '''
omap     <silent> m :<C-U>lua require('tsht').nodes()<CR>
vnoremap <silent> m :lua require('tsht').nodes()<CR>
'''

[[plugins]]
repo = 'David-Kunz/treesitter-unit'
depends = 'nvim-treesitter'
on_lua = 'treesitter-unit'
hook_add = '''
xnoremap iu :lua require"treesitter-unit".select()<CR>
xnoremap au :lua require"treesitter-unit".select(true)<CR>
onoremap iu :<c-u>lua require"treesitter-unit".select()<CR>
onoremap au :<c-u>lua require"treesitter-unit".select(true)<CR>
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'nvim-neo-tree/neo-tree.nvim'
depends = ['plenary.nvim', 'nvim-web-devicons', 'nui.nvim']
on_cmd = 'Neotree'
hook_add = '''
nnoremap <silent> <Leader>f :Neotree<CR>
'''
hook_source = '''
highlight NeoTreeGitConflict cterm=bold ctermfg=215 gui=bold guifg=#f39660
highlight NeoTreeGitUntracked ctermfg=215 guifg=#f39660

lua require('rc/plugin-config/neo-tree')
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
depends = 'nvim-hlslens'
on_map = '<Plug>'
hook_add = '''
let g:asterisk#keeppos = 1

map *  <Plug>(asterisk-z*)<Cmd>lua require('hlslens').start()<CR>
map #  <Plug>(asterisk-z#)<Cmd>lua require('hlslens').start()<CR>
map g* <Plug>(asterisk-gz*)<Cmd>lua require('hlslens').start()<CR>
map g# <Plug>(asterisk-gz#)<Cmd>lua require('hlslens').start()<CR>
'''

[[plugins]]
repo = 'folke/trouble.nvim'
on_cmd = 'TroubleToggle'
hook_add = '''
nnoremap <leader>xx <cmd>TroubleToggle<cr>
nnoremap <leader>xw <cmd>TroubleToggle workspace_diagnostics<cr>
nnoremap <leader>xd <cmd>TroubleToggle document_diagnostics<cr>
nnoremap <leader>xq <cmd>TroubleToggle quickfix<cr>
nnoremap <leader>xl <cmd>TroubleToggle loclist<cr>
nnoremap gR <cmd>TroubleToggle lsp_references<cr>
'''

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
on_ft = 'qf'
hook_source = '''
lua require('rc/plugin-config/nvim-bqf')
'''

[[plugins]]
repo = 'lewis6991/nvim-treesitter-context'
on_event = 'BufRead'
depends = 'nvim-treesitter'
hook_source = '''
lua require('rc/plugin-config/nvim-treesitter-context')
'''

[[plugins]]
repo = 'famiu/bufdelete.nvim'
on_cmd="Bdelete"
hook_add = '''
nnoremap <silent> bd :Bdelete<cr>
'''
